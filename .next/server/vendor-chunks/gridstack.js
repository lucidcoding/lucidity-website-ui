/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gridstack";
exports.ids = ["vendor-chunks/gridstack"];
exports.modules = {

/***/ "./node_modules/gridstack/dist/dd-base-impl.js":
/*!*****************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-base-impl.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDBaseImplement: () => (/* binding */ DDBaseImplement)\n/* harmony export */ });\n/**\n * dd-base-impl.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ class DDBaseImplement {\n    constructor(){\n        /** @internal */ this._eventRegister = {};\n    }\n    /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */ get disabled() {\n        return this._disabled;\n    }\n    on(event, callback) {\n        this._eventRegister[event] = callback;\n    }\n    off(event) {\n        delete this._eventRegister[event];\n    }\n    enable() {\n        this._disabled = false;\n    }\n    disable() {\n        this._disabled = true;\n    }\n    destroy() {\n        delete this._eventRegister;\n    }\n    triggerEvent(eventName, event) {\n        if (!this.disabled && this._eventRegister && this._eventRegister[eventName]) return this._eventRegister[eventName](event);\n    }\n} //# sourceMappingURL=dd-base-impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvZGQtYmFzZS1pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsY0FBYyxHQUNkLElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQUM7SUFDM0I7SUFDQSxpSEFBaUgsR0FDakgsSUFBSUMsV0FBVztRQUFFLE9BQU8sSUFBSSxDQUFDQyxTQUFTO0lBQUU7SUFDeENDLEdBQUdDLEtBQUssRUFBRUMsUUFBUSxFQUFFO1FBQ2hCLElBQUksQ0FBQ0wsY0FBYyxDQUFDSSxNQUFNLEdBQUdDO0lBQ2pDO0lBQ0FDLElBQUlGLEtBQUssRUFBRTtRQUNQLE9BQU8sSUFBSSxDQUFDSixjQUFjLENBQUNJLE1BQU07SUFDckM7SUFDQUcsU0FBUztRQUNMLElBQUksQ0FBQ0wsU0FBUyxHQUFHO0lBQ3JCO0lBQ0FNLFVBQVU7UUFDTixJQUFJLENBQUNOLFNBQVMsR0FBRztJQUNyQjtJQUNBTyxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUNULGNBQWM7SUFDOUI7SUFDQVUsYUFBYUMsU0FBUyxFQUFFUCxLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQ0gsUUFBUSxJQUFJLElBQUksQ0FBQ0QsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDVyxVQUFVLEVBQ3ZFLE9BQU8sSUFBSSxDQUFDWCxjQUFjLENBQUNXLFVBQVUsQ0FBQ1A7SUFDOUM7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2x1Y2lkaXR5LWQzanMvLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvZGQtYmFzZS1pbXBsLmpzPzM1MTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBkZC1iYXNlLWltcGwudHMgOS40LjBcbiAqIENvcHlyaWdodCAoYykgMjAyMS0yMDIyIEFsYWluIER1bWVzbnkgLSBzZWUgR3JpZFN0YWNrIHJvb3QgbGljZW5zZVxuICovXG5leHBvcnQgY2xhc3MgRERCYXNlSW1wbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9ldmVudFJlZ2lzdGVyID0ge307XG4gICAgfVxuICAgIC8qKiByZXR1cm5zIHRoZSBlbmFibGUgc3RhdGUsIGJ1dCB5b3UgaGF2ZSB0byBjYWxsIGVuYWJsZSgpL2Rpc2FibGUoKSB0byBjaGFuZ2UgKGFzIG90aGVyIHRoaW5ncyBuZWVkIHRvIGhhcHBlbikgKi9cbiAgICBnZXQgZGlzYWJsZWQoKSB7IHJldHVybiB0aGlzLl9kaXNhYmxlZDsgfVxuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ldmVudFJlZ2lzdGVyW2V2ZW50XSA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBvZmYoZXZlbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50UmVnaXN0ZXJbZXZlbnRdO1xuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50UmVnaXN0ZXI7XG4gICAgfVxuICAgIHRyaWdnZXJFdmVudChldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiB0aGlzLl9ldmVudFJlZ2lzdGVyICYmIHRoaXMuX2V2ZW50UmVnaXN0ZXJbZXZlbnROYW1lXSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ldmVudFJlZ2lzdGVyW2V2ZW50TmFtZV0oZXZlbnQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRkLWJhc2UtaW1wbC5qcy5tYXAiXSwibmFtZXMiOlsiRERCYXNlSW1wbGVtZW50IiwiY29uc3RydWN0b3IiLCJfZXZlbnRSZWdpc3RlciIsImRpc2FibGVkIiwiX2Rpc2FibGVkIiwib24iLCJldmVudCIsImNhbGxiYWNrIiwib2ZmIiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3kiLCJ0cmlnZ2VyRXZlbnQiLCJldmVudE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-base-impl.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-draggable.js":
/*!*****************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-draggable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDDraggable: () => (/* binding */ DDDraggable)\n/* harmony export */ });\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/* harmony import */ var _dd_base_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dd-base-impl */ \"./node_modules/gridstack/dist/dd-base-impl.js\");\n/* harmony import */ var _dd_touch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dd-touch */ \"./node_modules/gridstack/dist/dd-touch.js\");\n/**\n * dd-draggable.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ \n\n\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n// let count = 0; // TEST\nclass DDDraggable extends _dd_base_impl__WEBPACK_IMPORTED_MODULE_2__.DDBaseImplement {\n    constructor(el, option = {}){\n        super();\n        this.el = el;\n        this.option = option;\n        // get the element that is actually supposed to be dragged by\n        let handleName = option.handle.substring(1);\n        this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this.enable();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false) return;\n        super.enable();\n        this.dragEl.addEventListener(\"mousedown\", this._mouseDown);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.dragEl.addEventListener(\"touchstart\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchstart);\n            this.dragEl.addEventListener(\"pointerdown\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerdown);\n        // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n        }\n        this.el.classList.remove(\"ui-draggable-disabled\");\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true) return;\n        super.disable();\n        this.dragEl.removeEventListener(\"mousedown\", this._mouseDown);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.dragEl.removeEventListener(\"touchstart\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchstart);\n            this.dragEl.removeEventListener(\"pointerdown\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerdown);\n        }\n        if (!forDestroy) this.el.classList.add(\"ui-draggable-disabled\");\n    }\n    destroy() {\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        delete this.dragTimeout;\n        if (this.dragging) this._mouseUp(this.mouseDownEvent);\n        this.disable(true);\n        delete this.el;\n        delete this.helper;\n        delete this.option;\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach((key)=>this.option[key] = opts[key]);\n        return this;\n    }\n    /** @internal call when mouse goes down before a dragstart happens */ _mouseDown(e) {\n        // don't let more than one widget handle mouseStart\n        if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.mouseHandled) return;\n        if (e.button !== 0) return true; // only left click\n        // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n        if (e.target.closest(skipMouseDown)) return true;\n        if (this.option.cancel) {\n            if (e.target.closest(this.option.cancel)) return true;\n        }\n        // REMOVE: why would we get the event if it wasn't for us or child ?\n        // make sure we are clicking on a drag handle or child of it...\n        // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n        // let className = this.option.handle.substring(1);\n        // let el = e.target as HTMLElement;\n        // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n        // if (!el) return;\n        this.mouseDownEvent = e;\n        delete this.dragging;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement;\n        // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n        document.addEventListener(\"mousemove\", this._mouseMove, true); // true=capture, not bubble\n        document.addEventListener(\"mouseup\", this._mouseUp, true);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.dragEl.addEventListener(\"touchmove\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchmove);\n            this.dragEl.addEventListener(\"touchend\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchend);\n        }\n        e.preventDefault();\n        // preventDefault() prevents blur event which occurs just after mousedown event.\n        // if an editable content has focus, then blur must be call\n        if (document.activeElement) document.activeElement.blur();\n        _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.mouseHandled = true;\n        return true;\n    }\n    /** @internal method to call actual drag event */ _callDrag(e) {\n        if (!this.dragging) return;\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.initEvent(e, {\n            target: this.el,\n            type: \"drag\"\n        });\n        if (this.option.drag) {\n            this.option.drag(ev, this.ui());\n        }\n        this.triggerEvent(\"drag\", ev);\n    }\n    /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */ _mouseMove(e) {\n        // console.log(`${count++} move ${e.x},${e.y}`)\n        let s = this.mouseDownEvent;\n        if (this.dragging) {\n            this._dragFollow(e);\n            // delay actual grid handling drag until we pause for a while if set\n            if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.pauseDrag) {\n                const pause = Number.isInteger(_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.pauseDrag) ? _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.pauseDrag : 100;\n                if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n                this.dragTimeout = window.setTimeout(()=>this._callDrag(e), pause);\n            } else {\n                this._callDrag(e);\n            }\n        } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n            /**\n             * don't start unless we've moved at least 3 pixels\n             */ this.dragging = true;\n            _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement = this;\n            // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n            let grid = this.el.gridstackNode?.grid;\n            if (grid) {\n                _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement = grid.el.ddElement.ddDroppable;\n            } else {\n                delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement;\n            }\n            this.helper = this._createHelper(e);\n            this._setupHelperContainmentStyle();\n            this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n            const ev = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.initEvent(e, {\n                target: this.el,\n                type: \"dragstart\"\n            });\n            this._setupHelperStyle(e);\n            if (this.option.start) {\n                this.option.start(ev, this.ui());\n            }\n            this.triggerEvent(\"dragstart\", ev);\n        }\n        e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n        return true;\n    }\n    /** @internal call when the mouse gets released to drop the item at current location */ _mouseUp(e) {\n        document.removeEventListener(\"mousemove\", this._mouseMove, true);\n        document.removeEventListener(\"mouseup\", this._mouseUp, true);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.dragEl.removeEventListener(\"touchmove\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchmove, true);\n            this.dragEl.removeEventListener(\"touchend\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.touchend, true);\n        }\n        if (this.dragging) {\n            delete this.dragging;\n            // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n            if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement?.el === this.el.parentElement) {\n                delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement;\n            }\n            this.helperContainment.style.position = this.parentOriginStylePosition || null;\n            if (this.helper === this.el) {\n                this._removeHelperStyle();\n            } else {\n                this.helper.remove();\n            }\n            const ev = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.initEvent(e, {\n                target: this.el,\n                type: \"dragstop\"\n            });\n            if (this.option.stop) {\n                this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n            }\n            this.triggerEvent(\"dragstop\", ev);\n            // call the droppable method to receive the item\n            if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement) {\n                _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement.drop(e);\n            }\n        }\n        delete this.helper;\n        delete this.mouseDownEvent;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.mouseHandled;\n        e.preventDefault();\n    }\n    /** @internal create a clone copy (or user defined method) of the original drag item if set */ _createHelper(event) {\n        let helper = this.el;\n        if (typeof this.option.helper === \"function\") {\n            helper = this.option.helper(event);\n        } else if (this.option.helper === \"clone\") {\n            helper = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneNode(this.el);\n        }\n        if (!document.body.contains(helper)) {\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.appendTo(helper, this.option.appendTo === \"parent\" ? this.el.parentElement : this.option.appendTo);\n        }\n        if (helper === this.el) {\n            this.dragElementOriginStyle = DDDraggable.originStyleProp.map((prop)=>this.el.style[prop]);\n        }\n        return helper;\n    }\n    /** @internal set the fix position of the dragged item */ _setupHelperStyle(e) {\n        this.helper.classList.add(\"ui-draggable-dragging\");\n        // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n        const style = this.helper.style;\n        style.pointerEvents = \"none\"; // needed for over items to get enter/leave\n        // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n        style.width = this.dragOffset.width + \"px\";\n        style.height = this.dragOffset.height + \"px\";\n        style.willChange = \"left, top\";\n        style.position = \"fixed\"; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n        this._dragFollow(e); // now position it\n        style.transition = \"none\"; // show up instantly\n        setTimeout(()=>{\n            if (this.helper) {\n                style.transition = null; // recover animation\n            }\n        }, 0);\n        return this;\n    }\n    /** @internal restore back the original style before dragging */ _removeHelperStyle() {\n        this.helper.classList.remove(\"ui-draggable-dragging\");\n        let node = this.helper?.gridstackNode;\n        // don't bother restoring styles if we're gonna remove anyway...\n        if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n            let helper = this.helper;\n            // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n            // TODO: this also removes resizing animation which doesn't have this issue, but others.\n            // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n            // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n            // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n            let transition = this.dragElementOriginStyle[\"transition\"] || null;\n            helper.style.transition = this.dragElementOriginStyle[\"transition\"] = \"none\"; // can't be NULL #1973\n            DDDraggable.originStyleProp.forEach((prop)=>helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n            setTimeout(()=>helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n        }\n        delete this.dragElementOriginStyle;\n        return this;\n    }\n    /** @internal updates the top/left position to follow the mouse */ _dragFollow(e) {\n        let containmentRect = {\n            left: 0,\n            top: 0\n        };\n        // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n        //   const { left, top } = this.helperContainment.getBoundingClientRect();\n        //   containmentRect = { left, top };\n        // }\n        const style = this.helper.style;\n        const offset = this.dragOffset;\n        style.left = e.clientX + offset.offsetLeft - containmentRect.left + \"px\";\n        style.top = e.clientY + offset.offsetTop - containmentRect.top + \"px\";\n    }\n    /** @internal */ _setupHelperContainmentStyle() {\n        this.helperContainment = this.helper.parentElement;\n        if (this.helper.style.position !== \"fixed\") {\n            this.parentOriginStylePosition = this.helperContainment.style.position;\n            if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n                this.helperContainment.style.position = \"relative\";\n            }\n        }\n        return this;\n    }\n    /** @internal */ _getDragOffset(event, el, parent) {\n        // in case ancestor has transform/perspective css properties that change the viewpoint\n        let xformOffsetX = 0;\n        let xformOffsetY = 0;\n        if (parent) {\n            const testEl = document.createElement(\"div\");\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addElStyles(testEl, {\n                opacity: \"0\",\n                position: \"fixed\",\n                top: 0 + \"px\",\n                left: 0 + \"px\",\n                width: \"1px\",\n                height: \"1px\",\n                zIndex: \"-999999\"\n            });\n            parent.appendChild(testEl);\n            const testElPosition = testEl.getBoundingClientRect();\n            parent.removeChild(testEl);\n            xformOffsetX = testElPosition.left;\n            xformOffsetY = testElPosition.top;\n        // TODO: scale ?\n        }\n        const targetOffset = el.getBoundingClientRect();\n        return {\n            left: targetOffset.left,\n            top: targetOffset.top,\n            offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,\n            offsetTop: -event.clientY + targetOffset.top - xformOffsetY,\n            width: targetOffset.width,\n            height: targetOffset.height\n        };\n    }\n    /** @internal TODO: set to public as called by DDDroppable! */ ui() {\n        const containmentEl = this.el.parentElement;\n        const containmentRect = containmentEl.getBoundingClientRect();\n        const offset = this.helper.getBoundingClientRect();\n        return {\n            position: {\n                top: offset.top - containmentRect.top,\n                left: offset.left - containmentRect.left\n            }\n        };\n    }\n}\n/** @internal properties we change during dragging, and restore back */ DDDraggable.originStyleProp = [\n    \"transition\",\n    \"pointerEvents\",\n    \"position\",\n    \"left\",\n    \"top\",\n    \"minWidth\",\n    \"willChange\"\n];\n //# sourceMappingURL=dd-draggable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-draggable.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-droppable.js":
/*!*****************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-droppable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDDroppable: () => (/* binding */ DDDroppable)\n/* harmony export */ });\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/* harmony import */ var _dd_base_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dd-base-impl */ \"./node_modules/gridstack/dist/dd-base-impl.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/* harmony import */ var _dd_touch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dd-touch */ \"./node_modules/gridstack/dist/dd-touch.js\");\n/**\n * dd-droppable.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ \n\n\n\n// let count = 0; // TEST\nclass DDDroppable extends _dd_base_impl__WEBPACK_IMPORTED_MODULE_1__.DDBaseImplement {\n    constructor(el, opts = {}){\n        super();\n        this.el = el;\n        this.option = opts;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseEnter = this._mouseEnter.bind(this);\n        this._mouseLeave = this._mouseLeave.bind(this);\n        this.enable();\n        this._setupAccept();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false) return;\n        super.enable();\n        this.el.classList.add(\"ui-droppable\");\n        this.el.classList.remove(\"ui-droppable-disabled\");\n        this.el.addEventListener(\"mouseenter\", this._mouseEnter);\n        this.el.addEventListener(\"mouseleave\", this._mouseLeave);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.el.addEventListener(\"pointerenter\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerenter);\n            this.el.addEventListener(\"pointerleave\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerleave);\n        }\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true) return;\n        super.disable();\n        this.el.classList.remove(\"ui-droppable\");\n        if (!forDestroy) this.el.classList.add(\"ui-droppable-disabled\");\n        this.el.removeEventListener(\"mouseenter\", this._mouseEnter);\n        this.el.removeEventListener(\"mouseleave\", this._mouseLeave);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_3__.isTouch) {\n            this.el.removeEventListener(\"pointerenter\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerenter);\n            this.el.removeEventListener(\"pointerleave\", _dd_touch__WEBPACK_IMPORTED_MODULE_3__.pointerleave);\n        }\n    }\n    destroy() {\n        this.disable(true);\n        this.el.classList.remove(\"ui-droppable\");\n        this.el.classList.remove(\"ui-droppable-disabled\");\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach((key)=>this.option[key] = opts[key]);\n        this._setupAccept();\n        return this;\n    }\n    /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */ _mouseEnter(e) {\n        // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement) return;\n        if (!this._canDrop(_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement.el)) return;\n        e.preventDefault();\n        e.stopPropagation();\n        // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n        if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement && _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement !== this) {\n            _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement._mouseLeave(e);\n        }\n        _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement = this;\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(e, {\n            target: this.el,\n            type: \"dropover\"\n        });\n        if (this.option.over) {\n            this.option.over(ev, this._ui(_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement));\n        }\n        this.triggerEvent(\"dropover\", ev);\n        this.el.classList.add(\"ui-droppable-over\");\n    // console.log('tracking'); // TEST\n    }\n    /** @internal called when the item is leaving our area, stop tracking if we had moving item */ _mouseLeave(e) {\n        // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement || _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement !== this) return;\n        e.preventDefault();\n        e.stopPropagation();\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(e, {\n            target: this.el,\n            type: \"dropout\"\n        });\n        if (this.option.out) {\n            this.option.out(ev, this._ui(_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement));\n        }\n        this.triggerEvent(\"dropout\", ev);\n        if (_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement === this) {\n            delete _dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dropElement;\n            // console.log('not tracking'); // TEST\n            // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n            let parentDrop;\n            let parent = this.el.parentElement;\n            while(!parentDrop && parent){\n                parentDrop = parent.ddElement?.ddDroppable;\n                parent = parent.parentElement;\n            }\n            if (parentDrop) {\n                parentDrop._mouseEnter(e);\n            }\n        }\n    }\n    /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */ drop(e) {\n        e.preventDefault();\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(e, {\n            target: this.el,\n            type: \"drop\"\n        });\n        if (this.option.drop) {\n            this.option.drop(ev, this._ui(_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement));\n        }\n        this.triggerEvent(\"drop\", ev);\n    }\n    /** @internal true if element matches the string/method accept option */ _canDrop(el) {\n        return el && (!this.accept || this.accept(el));\n    }\n    /** @internal */ _setupAccept() {\n        if (!this.option.accept) return this;\n        if (typeof this.option.accept === \"string\") {\n            this.accept = (el)=>el.classList.contains(this.option.accept) || el.matches(this.option.accept);\n        } else {\n            this.accept = this.option.accept;\n        }\n        return this;\n    }\n    /** @internal */ _ui(drag) {\n        return {\n            draggable: drag.el,\n            ...drag.ui()\n        };\n    }\n} //# sourceMappingURL=dd-droppable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-droppable.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-element.js":
/*!***************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-element.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDElement: () => (/* binding */ DDElement)\n/* harmony export */ });\n/* harmony import */ var _dd_resizable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-resizable */ \"./node_modules/gridstack/dist/dd-resizable.js\");\n/* harmony import */ var _dd_draggable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dd-draggable */ \"./node_modules/gridstack/dist/dd-draggable.js\");\n/* harmony import */ var _dd_droppable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dd-droppable */ \"./node_modules/gridstack/dist/dd-droppable.js\");\n/**\n * dd-elements.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ \n\n\nclass DDElement {\n    static init(el) {\n        if (!el.ddElement) {\n            el.ddElement = new DDElement(el);\n        }\n        return el.ddElement;\n    }\n    constructor(el){\n        this.el = el;\n    }\n    on(eventName, callback) {\n        if (this.ddDraggable && [\n            \"drag\",\n            \"dragstart\",\n            \"dragstop\"\n        ].indexOf(eventName) > -1) {\n            this.ddDraggable.on(eventName, callback);\n        } else if (this.ddDroppable && [\n            \"drop\",\n            \"dropover\",\n            \"dropout\"\n        ].indexOf(eventName) > -1) {\n            this.ddDroppable.on(eventName, callback);\n        } else if (this.ddResizable && [\n            \"resizestart\",\n            \"resize\",\n            \"resizestop\"\n        ].indexOf(eventName) > -1) {\n            this.ddResizable.on(eventName, callback);\n        }\n        return this;\n    }\n    off(eventName) {\n        if (this.ddDraggable && [\n            \"drag\",\n            \"dragstart\",\n            \"dragstop\"\n        ].indexOf(eventName) > -1) {\n            this.ddDraggable.off(eventName);\n        } else if (this.ddDroppable && [\n            \"drop\",\n            \"dropover\",\n            \"dropout\"\n        ].indexOf(eventName) > -1) {\n            this.ddDroppable.off(eventName);\n        } else if (this.ddResizable && [\n            \"resizestart\",\n            \"resize\",\n            \"resizestop\"\n        ].indexOf(eventName) > -1) {\n            this.ddResizable.off(eventName);\n        }\n        return this;\n    }\n    setupDraggable(opts) {\n        if (!this.ddDraggable) {\n            this.ddDraggable = new _dd_draggable__WEBPACK_IMPORTED_MODULE_1__.DDDraggable(this.el, opts);\n        } else {\n            this.ddDraggable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDraggable() {\n        if (this.ddDraggable) {\n            this.ddDraggable.destroy();\n            delete this.ddDraggable;\n        }\n        return this;\n    }\n    setupResizable(opts) {\n        if (!this.ddResizable) {\n            this.ddResizable = new _dd_resizable__WEBPACK_IMPORTED_MODULE_0__.DDResizable(this.el, opts);\n        } else {\n            this.ddResizable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanResizable() {\n        if (this.ddResizable) {\n            this.ddResizable.destroy();\n            delete this.ddResizable;\n        }\n        return this;\n    }\n    setupDroppable(opts) {\n        if (!this.ddDroppable) {\n            this.ddDroppable = new _dd_droppable__WEBPACK_IMPORTED_MODULE_2__.DDDroppable(this.el, opts);\n        } else {\n            this.ddDroppable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDroppable() {\n        if (this.ddDroppable) {\n            this.ddDroppable.destroy();\n            delete this.ddDroppable;\n        }\n        return this;\n    }\n} //# sourceMappingURL=dd-element.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvZGQtZWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7OztDQUdDLEdBQzRDO0FBQ0E7QUFDQTtBQUN0QyxNQUFNRztJQUNULE9BQU9DLEtBQUtDLEVBQUUsRUFBRTtRQUNaLElBQUksQ0FBQ0EsR0FBR0MsU0FBUyxFQUFFO1lBQ2ZELEdBQUdDLFNBQVMsR0FBRyxJQUFJSCxVQUFVRTtRQUNqQztRQUNBLE9BQU9BLEdBQUdDLFNBQVM7SUFDdkI7SUFDQUMsWUFBWUYsRUFBRSxDQUFFO1FBQ1osSUFBSSxDQUFDQSxFQUFFLEdBQUdBO0lBQ2Q7SUFDQUcsR0FBR0MsU0FBUyxFQUFFQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUNDLFdBQVcsSUFBSTtZQUFDO1lBQVE7WUFBYTtTQUFXLENBQUNDLE9BQU8sQ0FBQ0gsYUFBYSxDQUFDLEdBQUc7WUFDL0UsSUFBSSxDQUFDRSxXQUFXLENBQUNILEVBQUUsQ0FBQ0MsV0FBV0M7UUFDbkMsT0FDSyxJQUFJLElBQUksQ0FBQ0csV0FBVyxJQUFJO1lBQUM7WUFBUTtZQUFZO1NBQVUsQ0FBQ0QsT0FBTyxDQUFDSCxhQUFhLENBQUMsR0FBRztZQUNsRixJQUFJLENBQUNJLFdBQVcsQ0FBQ0wsRUFBRSxDQUFDQyxXQUFXQztRQUNuQyxPQUNLLElBQUksSUFBSSxDQUFDSSxXQUFXLElBQUk7WUFBQztZQUFlO1lBQVU7U0FBYSxDQUFDRixPQUFPLENBQUNILGFBQWEsQ0FBQyxHQUFHO1lBQzFGLElBQUksQ0FBQ0ssV0FBVyxDQUFDTixFQUFFLENBQUNDLFdBQVdDO1FBQ25DO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFDQUssSUFBSU4sU0FBUyxFQUFFO1FBQ1gsSUFBSSxJQUFJLENBQUNFLFdBQVcsSUFBSTtZQUFDO1lBQVE7WUFBYTtTQUFXLENBQUNDLE9BQU8sQ0FBQ0gsYUFBYSxDQUFDLEdBQUc7WUFDL0UsSUFBSSxDQUFDRSxXQUFXLENBQUNJLEdBQUcsQ0FBQ047UUFDekIsT0FDSyxJQUFJLElBQUksQ0FBQ0ksV0FBVyxJQUFJO1lBQUM7WUFBUTtZQUFZO1NBQVUsQ0FBQ0QsT0FBTyxDQUFDSCxhQUFhLENBQUMsR0FBRztZQUNsRixJQUFJLENBQUNJLFdBQVcsQ0FBQ0UsR0FBRyxDQUFDTjtRQUN6QixPQUNLLElBQUksSUFBSSxDQUFDSyxXQUFXLElBQUk7WUFBQztZQUFlO1lBQVU7U0FBYSxDQUFDRixPQUFPLENBQUNILGFBQWEsQ0FBQyxHQUFHO1lBQzFGLElBQUksQ0FBQ0ssV0FBVyxDQUFDQyxHQUFHLENBQUNOO1FBQ3pCO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFDQU8sZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNOLFdBQVcsRUFBRTtZQUNuQixJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJVixzREFBV0EsQ0FBQyxJQUFJLENBQUNJLEVBQUUsRUFBRVk7UUFDaEQsT0FDSztZQUNELElBQUksQ0FBQ04sV0FBVyxDQUFDTyxZQUFZLENBQUNEO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFDQUUsaUJBQWlCO1FBQ2IsSUFBSSxJQUFJLENBQUNSLFdBQVcsRUFBRTtZQUNsQixJQUFJLENBQUNBLFdBQVcsQ0FBQ1MsT0FBTztZQUN4QixPQUFPLElBQUksQ0FBQ1QsV0FBVztRQUMzQjtRQUNBLE9BQU8sSUFBSTtJQUNmO0lBQ0FVLGVBQWVKLElBQUksRUFBRTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDSCxXQUFXLEVBQUU7WUFDbkIsSUFBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSWQsc0RBQVdBLENBQUMsSUFBSSxDQUFDSyxFQUFFLEVBQUVZO1FBQ2hELE9BQ0s7WUFDRCxJQUFJLENBQUNILFdBQVcsQ0FBQ0ksWUFBWSxDQUFDRDtRQUNsQztRQUNBLE9BQU8sSUFBSTtJQUNmO0lBQ0FLLGlCQUFpQjtRQUNiLElBQUksSUFBSSxDQUFDUixXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDQSxXQUFXLENBQUNNLE9BQU87WUFDeEIsT0FBTyxJQUFJLENBQUNOLFdBQVc7UUFDM0I7UUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBUyxlQUFlTixJQUFJLEVBQUU7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQ0osV0FBVyxFQUFFO1lBQ25CLElBQUksQ0FBQ0EsV0FBVyxHQUFHLElBQUlYLHNEQUFXQSxDQUFDLElBQUksQ0FBQ0csRUFBRSxFQUFFWTtRQUNoRCxPQUNLO1lBQ0QsSUFBSSxDQUFDSixXQUFXLENBQUNLLFlBQVksQ0FBQ0Q7UUFDbEM7UUFDQSxPQUFPLElBQUk7SUFDZjtJQUNBTyxpQkFBaUI7UUFDYixJQUFJLElBQUksQ0FBQ1gsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQ0EsV0FBVyxDQUFDTyxPQUFPO1lBQ3hCLE9BQU8sSUFBSSxDQUFDUCxXQUFXO1FBQzNCO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2x1Y2lkaXR5LWQzanMvLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvZGQtZWxlbWVudC5qcz8zOGY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZGQtZWxlbWVudHMudHMgOS40LjBcbiAqIENvcHlyaWdodCAoYykgMjAyMSBBbGFpbiBEdW1lc255IC0gc2VlIEdyaWRTdGFjayByb290IGxpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRERSZXNpemFibGUgfSBmcm9tICcuL2RkLXJlc2l6YWJsZSc7XG5pbXBvcnQgeyBERERyYWdnYWJsZSB9IGZyb20gJy4vZGQtZHJhZ2dhYmxlJztcbmltcG9ydCB7IERERHJvcHBhYmxlIH0gZnJvbSAnLi9kZC1kcm9wcGFibGUnO1xuZXhwb3J0IGNsYXNzIERERWxlbWVudCB7XG4gICAgc3RhdGljIGluaXQoZWwpIHtcbiAgICAgICAgaWYgKCFlbC5kZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsLmRkRWxlbWVudCA9IG5ldyBEREVsZW1lbnQoZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbC5kZEVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGVsKSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5kZERyYWdnYWJsZSAmJiBbJ2RyYWcnLCAnZHJhZ3N0YXJ0JywgJ2RyYWdzdG9wJ10uaW5kZXhPZihldmVudE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZGREcmFnZ2FibGUub24oZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZERyb3BwYWJsZSAmJiBbJ2Ryb3AnLCAnZHJvcG92ZXInLCAnZHJvcG91dCddLmluZGV4T2YoZXZlbnROYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRkRHJvcHBhYmxlLm9uKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGRSZXNpemFibGUgJiYgWydyZXNpemVzdGFydCcsICdyZXNpemUnLCAncmVzaXplc3RvcCddLmluZGV4T2YoZXZlbnROYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRkUmVzaXphYmxlLm9uKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvZmYoZXZlbnROYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmRkRHJhZ2dhYmxlICYmIFsnZHJhZycsICdkcmFnc3RhcnQnLCAnZHJhZ3N0b3AnXS5pbmRleE9mKGV2ZW50TmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5kZERyYWdnYWJsZS5vZmYoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRkRHJvcHBhYmxlICYmIFsnZHJvcCcsICdkcm9wb3ZlcicsICdkcm9wb3V0J10uaW5kZXhPZihldmVudE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZGREcm9wcGFibGUub2ZmKGV2ZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZFJlc2l6YWJsZSAmJiBbJ3Jlc2l6ZXN0YXJ0JywgJ3Jlc2l6ZScsICdyZXNpemVzdG9wJ10uaW5kZXhPZihldmVudE5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZGRSZXNpemFibGUub2ZmKGV2ZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldHVwRHJhZ2dhYmxlKG9wdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRkRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmRkRHJhZ2dhYmxlID0gbmV3IERERHJhZ2dhYmxlKHRoaXMuZWwsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZERyYWdnYWJsZS51cGRhdGVPcHRpb24ob3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNsZWFuRHJhZ2dhYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5kZERyYWdnYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5kZERyYWdnYWJsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kZERyYWdnYWJsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0dXBSZXNpemFibGUob3B0cykge1xuICAgICAgICBpZiAoIXRoaXMuZGRSZXNpemFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGRSZXNpemFibGUgPSBuZXcgRERSZXNpemFibGUodGhpcy5lbCwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRkUmVzaXphYmxlLnVwZGF0ZU9wdGlvbihvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2xlYW5SZXNpemFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmRkUmVzaXphYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmRkUmVzaXphYmxlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRkUmVzaXphYmxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXR1cERyb3BwYWJsZShvcHRzKSB7XG4gICAgICAgIGlmICghdGhpcy5kZERyb3BwYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5kZERyb3BwYWJsZSA9IG5ldyBERERyb3BwYWJsZSh0aGlzLmVsLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGREcm9wcGFibGUudXBkYXRlT3B0aW9uKG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhbkRyb3BwYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGREcm9wcGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGREcm9wcGFibGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGREcm9wcGFibGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGQtZWxlbWVudC5qcy5tYXAiXSwibmFtZXMiOlsiRERSZXNpemFibGUiLCJERERyYWdnYWJsZSIsIkRERHJvcHBhYmxlIiwiRERFbGVtZW50IiwiaW5pdCIsImVsIiwiZGRFbGVtZW50IiwiY29uc3RydWN0b3IiLCJvbiIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiZGREcmFnZ2FibGUiLCJpbmRleE9mIiwiZGREcm9wcGFibGUiLCJkZFJlc2l6YWJsZSIsIm9mZiIsInNldHVwRHJhZ2dhYmxlIiwib3B0cyIsInVwZGF0ZU9wdGlvbiIsImNsZWFuRHJhZ2dhYmxlIiwiZGVzdHJveSIsInNldHVwUmVzaXphYmxlIiwiY2xlYW5SZXNpemFibGUiLCJzZXR1cERyb3BwYWJsZSIsImNsZWFuRHJvcHBhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-element.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-gridstack.js":
/*!*****************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-gridstack.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDGridStack: () => (/* binding */ DDGridStack)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/* harmony import */ var _dd_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dd-element */ \"./node_modules/gridstack/dist/dd-element.js\");\n/**\n * dd-gridstack.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ \n\n\n// let count = 0; // TEST\n/**\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\n */ class DDGridStack {\n    resizable(el, opts, key, value) {\n        this._getDDElements(el).forEach((dEl)=>{\n            if (opts === \"disable\" || opts === \"enable\") {\n                dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n            } else if (opts === \"destroy\") {\n                dEl.ddResizable && dEl.cleanResizable();\n            } else if (opts === \"option\") {\n                dEl.setupResizable({\n                    [key]: value\n                });\n            } else {\n                const grid = dEl.el.gridstackNode.grid;\n                let handles = dEl.el.getAttribute(\"gs-resize-handles\") ? dEl.el.getAttribute(\"gs-resize-handles\") : grid.opts.resizable.handles;\n                let autoHide = !grid.opts.alwaysShowResizeHandle;\n                dEl.setupResizable({\n                    ...grid.opts.resizable,\n                    ...{\n                        handles,\n                        autoHide\n                    },\n                    ...{\n                        start: opts.start,\n                        stop: opts.stop,\n                        resize: opts.resize\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    draggable(el, opts, key, value) {\n        this._getDDElements(el).forEach((dEl)=>{\n            if (opts === \"disable\" || opts === \"enable\") {\n                dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n            } else if (opts === \"destroy\") {\n                dEl.ddDraggable && dEl.cleanDraggable();\n            } else if (opts === \"option\") {\n                dEl.setupDraggable({\n                    [key]: value\n                });\n            } else {\n                const grid = dEl.el.gridstackNode.grid;\n                dEl.setupDraggable({\n                    ...grid.opts.draggable,\n                    ...{\n                        // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\n                        start: opts.start,\n                        stop: opts.stop,\n                        drag: opts.drag\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    dragIn(el, opts) {\n        this._getDDElements(el).forEach((dEl)=>dEl.setupDraggable(opts));\n        return this;\n    }\n    droppable(el, opts, key, value) {\n        if (typeof opts.accept === \"function\" && !opts._accept) {\n            opts._accept = opts.accept;\n            opts.accept = (el)=>opts._accept(el);\n        }\n        this._getDDElements(el).forEach((dEl)=>{\n            if (opts === \"disable\" || opts === \"enable\") {\n                dEl.ddDroppable && dEl.ddDroppable[opts]();\n            } else if (opts === \"destroy\") {\n                if (dEl.ddDroppable) {\n                    dEl.cleanDroppable();\n                }\n            } else if (opts === \"option\") {\n                dEl.setupDroppable({\n                    [key]: value\n                });\n            } else {\n                dEl.setupDroppable(opts);\n            }\n        });\n        return this;\n    }\n    /** true if element is droppable */ isDroppable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n    }\n    /** true if element is draggable */ isDraggable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n    }\n    /** true if element is draggable */ isResizable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n    }\n    on(el, name, callback) {\n        this._getDDElements(el).forEach((dEl)=>dEl.on(name, (event)=>{\n                callback(event, _dd_manager__WEBPACK_IMPORTED_MODULE_1__.DDManager.dragElement ? _dd_manager__WEBPACK_IMPORTED_MODULE_1__.DDManager.dragElement.el : event.target, _dd_manager__WEBPACK_IMPORTED_MODULE_1__.DDManager.dragElement ? _dd_manager__WEBPACK_IMPORTED_MODULE_1__.DDManager.dragElement.helper : null);\n            }));\n        return this;\n    }\n    off(el, name) {\n        this._getDDElements(el).forEach((dEl)=>dEl.off(name));\n        return this;\n    }\n    /** @internal returns a list of DD elements, creating them on the fly by default */ _getDDElements(els, create = true) {\n        let hosts = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.getElements(els);\n        if (!hosts.length) return [];\n        let list = hosts.map((e)=>e.ddElement || (create ? _dd_element__WEBPACK_IMPORTED_MODULE_2__.DDElement.init(e) : null));\n        if (!create) {\n            list.filter((d)=>d);\n        } // remove nulls\n        return list;\n    }\n} //# sourceMappingURL=dd-gridstack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-gridstack.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-manager.js":
/*!***************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-manager.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDManager: () => (/* binding */ DDManager)\n/* harmony export */ });\n/**\n * dd-manager.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ /**\n * globals that are shared across Drag & Drop instances\n */ class DDManager {\n} //# sourceMappingURL=dd-manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvZGQtbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDTSxNQUFNQTtBQUNiLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbHVjaWRpdHktZDNqcy8uL25vZGVfbW9kdWxlcy9ncmlkc3RhY2svZGlzdC9kZC1tYW5hZ2VyLmpzPzVkMWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBkZC1tYW5hZ2VyLnRzIDkuNC4wXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgQWxhaW4gRHVtZXNueSAtIHNlZSBHcmlkU3RhY2sgcm9vdCBsaWNlbnNlXG4gKi9cbi8qKlxuICogZ2xvYmFscyB0aGF0IGFyZSBzaGFyZWQgYWNyb3NzIERyYWcgJiBEcm9wIGluc3RhbmNlc1xuICovXG5leHBvcnQgY2xhc3MgRERNYW5hZ2VyIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRkLW1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbIkRETWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-manager.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-resizable-handle.js":
/*!************************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-resizable-handle.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDResizableHandle: () => (/* binding */ DDResizableHandle)\n/* harmony export */ });\n/* harmony import */ var _dd_touch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-touch */ \"./node_modules/gridstack/dist/dd-touch.js\");\n/**\n * dd-resizable-handle.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ \nclass DDResizableHandle {\n    constructor(host, direction, option){\n        /** @internal true after we've moved enough pixels to start a resize */ this.moving = false;\n        this.host = host;\n        this.dir = direction;\n        this.option = option;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this._init();\n    }\n    /** @internal */ _init() {\n        const el = document.createElement(\"div\");\n        el.classList.add(\"ui-resizable-handle\");\n        el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n        el.style.zIndex = \"100\";\n        el.style.userSelect = \"none\";\n        this.el = el;\n        this.host.appendChild(this.el);\n        this.el.addEventListener(\"mousedown\", this._mouseDown);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_0__.isTouch) {\n            this.el.addEventListener(\"touchstart\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchstart);\n            this.el.addEventListener(\"pointerdown\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.pointerdown);\n        // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n        }\n        return this;\n    }\n    /** call this when resize handle needs to be removed and cleaned up */ destroy() {\n        if (this.moving) this._mouseUp(this.mouseDownEvent);\n        this.el.removeEventListener(\"mousedown\", this._mouseDown);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_0__.isTouch) {\n            this.el.removeEventListener(\"touchstart\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchstart);\n            this.el.removeEventListener(\"pointerdown\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.pointerdown);\n        }\n        this.host.removeChild(this.el);\n        delete this.el;\n        delete this.host;\n        return this;\n    }\n    /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */ _mouseDown(e) {\n        this.mouseDownEvent = e;\n        document.addEventListener(\"mousemove\", this._mouseMove, true); // capture, not bubble\n        document.addEventListener(\"mouseup\", this._mouseUp, true);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_0__.isTouch) {\n            this.el.addEventListener(\"touchmove\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchmove);\n            this.el.addEventListener(\"touchend\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchend);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */ _mouseMove(e) {\n        let s = this.mouseDownEvent;\n        if (this.moving) {\n            this._triggerEvent(\"move\", e);\n        } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n            // don't start unless we've moved at least 3 pixels\n            this.moving = true;\n            this._triggerEvent(\"start\", this.mouseDownEvent);\n            this._triggerEvent(\"move\", e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */ _mouseUp(e) {\n        if (this.moving) {\n            this._triggerEvent(\"stop\", e);\n        }\n        document.removeEventListener(\"mousemove\", this._mouseMove, true);\n        document.removeEventListener(\"mouseup\", this._mouseUp, true);\n        if (_dd_touch__WEBPACK_IMPORTED_MODULE_0__.isTouch) {\n            this.el.removeEventListener(\"touchmove\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchmove);\n            this.el.removeEventListener(\"touchend\", _dd_touch__WEBPACK_IMPORTED_MODULE_0__.touchend);\n        }\n        delete this.moving;\n        delete this.mouseDownEvent;\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */ _triggerEvent(name, event) {\n        if (this.option[name]) this.option[name](event);\n        return this;\n    }\n}\n/** @internal */ DDResizableHandle.prefix = \"ui-resizable-\";\n //# sourceMappingURL=dd-resizable-handle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-resizable-handle.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-resizable.js":
/*!*****************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-resizable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DDResizable: () => (/* binding */ DDResizable)\n/* harmony export */ });\n/* harmony import */ var _dd_resizable_handle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-resizable-handle */ \"./node_modules/gridstack/dist/dd-resizable-handle.js\");\n/* harmony import */ var _dd_base_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dd-base-impl */ \"./node_modules/gridstack/dist/dd-base-impl.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/**\n * dd-resizable.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ \n\n\n\nclass DDResizable extends _dd_base_impl__WEBPACK_IMPORTED_MODULE_1__.DDBaseImplement {\n    constructor(el, opts = {}){\n        super();\n        /** @internal */ this._ui = ()=>{\n            const containmentEl = this.el.parentElement;\n            const containmentRect = containmentEl.getBoundingClientRect();\n            const newRect = {\n                width: this.originalRect.width,\n                height: this.originalRect.height + this.scrolled,\n                left: this.originalRect.left,\n                top: this.originalRect.top - this.scrolled\n            };\n            const rect = this.temporalRect || newRect;\n            return {\n                position: {\n                    left: rect.left - containmentRect.left,\n                    top: rect.top - containmentRect.top\n                },\n                size: {\n                    width: rect.width,\n                    height: rect.height\n                }\n            };\n        };\n        this.el = el;\n        this.option = opts;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseOver = this._mouseOver.bind(this);\n        this._mouseOut = this._mouseOut.bind(this);\n        this.enable();\n        this._setupAutoHide(this.option.autoHide);\n        this._setupHandlers();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        super.enable();\n        this.el.classList.remove(\"ui-resizable-disabled\");\n        this._setupAutoHide(this.option.autoHide);\n    }\n    disable() {\n        super.disable();\n        this.el.classList.add(\"ui-resizable-disabled\");\n        this._setupAutoHide(false);\n    }\n    destroy() {\n        this._removeHandlers();\n        this._setupAutoHide(false);\n        delete this.el;\n        super.destroy();\n    }\n    updateOption(opts) {\n        let updateHandles = opts.handles && opts.handles !== this.option.handles;\n        let updateAutoHide = opts.autoHide && opts.autoHide !== this.option.autoHide;\n        Object.keys(opts).forEach((key)=>this.option[key] = opts[key]);\n        if (updateHandles) {\n            this._removeHandlers();\n            this._setupHandlers();\n        }\n        if (updateAutoHide) {\n            this._setupAutoHide(this.option.autoHide);\n        }\n        return this;\n    }\n    /** @internal turns auto hide on/off */ _setupAutoHide(auto) {\n        if (auto) {\n            this.el.classList.add(\"ui-resizable-autohide\");\n            // use mouseover and not mouseenter to get better performance and track for nested cases\n            this.el.addEventListener(\"mouseover\", this._mouseOver);\n            this.el.addEventListener(\"mouseout\", this._mouseOut);\n        } else {\n            this.el.classList.remove(\"ui-resizable-autohide\");\n            this.el.removeEventListener(\"mouseover\", this._mouseOver);\n            this.el.removeEventListener(\"mouseout\", this._mouseOut);\n            if (_dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement === this) {\n                delete _dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement;\n            }\n        }\n        return this;\n    }\n    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOver(e) {\n        // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n        if (_dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement || _dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.dragElement) return;\n        _dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement = this;\n        // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.remove(\"ui-resizable-autohide\");\n    }\n    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOut(e) {\n        // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        if (_dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement !== this) return;\n        delete _dd_manager__WEBPACK_IMPORTED_MODULE_3__.DDManager.overResizeElement;\n        // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.add(\"ui-resizable-autohide\");\n    }\n    /** @internal */ _setupHandlers() {\n        let handlerDirection = this.option.handles || \"e,s,se\";\n        if (handlerDirection === \"all\") {\n            handlerDirection = \"n,e,s,w,se,sw,ne,nw\";\n        }\n        this.handlers = handlerDirection.split(\",\").map((dir)=>dir.trim()).map((dir)=>new _dd_resizable_handle__WEBPACK_IMPORTED_MODULE_0__.DDResizableHandle(this.el, dir, {\n                start: (event)=>{\n                    this._resizeStart(event);\n                },\n                stop: (event)=>{\n                    this._resizeStop(event);\n                },\n                move: (event)=>{\n                    this._resizing(event, dir);\n                }\n            }));\n        return this;\n    }\n    /** @internal */ _resizeStart(event) {\n        this.originalRect = this.el.getBoundingClientRect();\n        this.scrollEl = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.getScrollElement(this.el);\n        this.scrollY = this.scrollEl.scrollTop;\n        this.scrolled = 0;\n        this.startEvent = event;\n        this._setupHelper();\n        this._applyChange();\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(event, {\n            type: \"resizestart\",\n            target: this.el\n        });\n        if (this.option.start) {\n            this.option.start(ev, this._ui());\n        }\n        this.el.classList.add(\"ui-resizable-resizing\");\n        this.triggerEvent(\"resizestart\", ev);\n        return this;\n    }\n    /** @internal */ _resizing(event, dir) {\n        this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n        this.temporalRect = this._getChange(event, dir);\n        this._applyChange();\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(event, {\n            type: \"resize\",\n            target: this.el\n        });\n        if (this.option.resize) {\n            this.option.resize(ev, this._ui());\n        }\n        this.triggerEvent(\"resize\", ev);\n        return this;\n    }\n    /** @internal */ _resizeStop(event) {\n        const ev = _utils__WEBPACK_IMPORTED_MODULE_2__.Utils.initEvent(event, {\n            type: \"resizestop\",\n            target: this.el\n        });\n        if (this.option.stop) {\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n        }\n        this.el.classList.remove(\"ui-resizable-resizing\");\n        this.triggerEvent(\"resizestop\", ev);\n        this._cleanHelper();\n        delete this.startEvent;\n        delete this.originalRect;\n        delete this.temporalRect;\n        delete this.scrollY;\n        delete this.scrolled;\n        return this;\n    }\n    /** @internal */ _setupHelper() {\n        this.elOriginStyleVal = DDResizable._originStyleProp.map((prop)=>this.el.style[prop]);\n        this.parentOriginStylePosition = this.el.parentElement.style.position;\n        if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n            this.el.parentElement.style.position = \"relative\";\n        }\n        this.el.style.position = \"absolute\";\n        this.el.style.opacity = \"0.8\";\n        return this;\n    }\n    /** @internal */ _cleanHelper() {\n        DDResizable._originStyleProp.forEach((prop, i)=>{\n            this.el.style[prop] = this.elOriginStyleVal[i] || null;\n        });\n        this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n        return this;\n    }\n    /** @internal */ _getChange(event, dir) {\n        const oEvent = this.startEvent;\n        const newRect = {\n            width: this.originalRect.width,\n            height: this.originalRect.height + this.scrolled,\n            left: this.originalRect.left,\n            top: this.originalRect.top - this.scrolled\n        };\n        const offsetX = event.clientX - oEvent.clientX;\n        const offsetY = event.clientY - oEvent.clientY;\n        if (dir.indexOf(\"e\") > -1) {\n            newRect.width += offsetX;\n        } else if (dir.indexOf(\"w\") > -1) {\n            newRect.width -= offsetX;\n            newRect.left += offsetX;\n        }\n        if (dir.indexOf(\"s\") > -1) {\n            newRect.height += offsetY;\n        } else if (dir.indexOf(\"n\") > -1) {\n            newRect.height -= offsetY;\n            newRect.top += offsetY;\n        }\n        const constrain = this._constrainSize(newRect.width, newRect.height);\n        if (Math.round(newRect.width) !== Math.round(constrain.width)) {\n            if (dir.indexOf(\"w\") > -1) {\n                newRect.left += newRect.width - constrain.width;\n            }\n            newRect.width = constrain.width;\n        }\n        if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n            if (dir.indexOf(\"n\") > -1) {\n                newRect.top += newRect.height - constrain.height;\n            }\n            newRect.height = constrain.height;\n        }\n        return newRect;\n    }\n    /** @internal constrain the size to the set min/max values */ _constrainSize(oWidth, oHeight) {\n        const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n        const minWidth = this.option.minWidth || oWidth;\n        const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n        const minHeight = this.option.minHeight || oHeight;\n        const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n        const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n        return {\n            width,\n            height\n        };\n    }\n    /** @internal */ _applyChange() {\n        let containmentRect = {\n            left: 0,\n            top: 0,\n            width: 0,\n            height: 0\n        };\n        if (this.el.style.position === \"absolute\") {\n            const containmentEl = this.el.parentElement;\n            const { left, top } = containmentEl.getBoundingClientRect();\n            containmentRect = {\n                left,\n                top,\n                width: 0,\n                height: 0\n            };\n        }\n        if (!this.temporalRect) return this;\n        Object.keys(this.temporalRect).forEach((key)=>{\n            const value = this.temporalRect[key];\n            this.el.style[key] = value - containmentRect[key] + \"px\";\n        });\n        return this;\n    }\n    /** @internal */ _removeHandlers() {\n        this.handlers.forEach((handle)=>handle.destroy());\n        delete this.handlers;\n        return this;\n    }\n}\n/** @internal */ DDResizable._originStyleProp = [\n    \"width\",\n    \"height\",\n    \"position\",\n    \"left\",\n    \"top\",\n    \"opacity\",\n    \"zIndex\"\n];\n //# sourceMappingURL=dd-resizable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-resizable.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/dd-touch.js":
/*!*************************************************!*\
  !*** ./node_modules/gridstack/dist/dd-touch.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTouch: () => (/* binding */ isTouch),\n/* harmony export */   pointerdown: () => (/* binding */ pointerdown),\n/* harmony export */   pointerenter: () => (/* binding */ pointerenter),\n/* harmony export */   pointerleave: () => (/* binding */ pointerleave),\n/* harmony export */   touchend: () => (/* binding */ touchend),\n/* harmony export */   touchmove: () => (/* binding */ touchmove),\n/* harmony export */   touchstart: () => (/* binding */ touchstart)\n/* harmony export */ });\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/**\n * touch.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ \n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */ const isTouch =  false && (0);\n// interface TouchCoord {x: number, y: number};\nclass DDTouch {\n}\n/**\n* Get the x,y position of a touch event\n*/ // function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */ function simulateMouseEvent(e, simulatedType) {\n    // Ignore multi-touch events\n    if (e.touches.length > 1) return;\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable) e.preventDefault();\n    const touch = e.changedTouches[0], simulatedEvent = document.createEvent(\"MouseEvents\");\n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(simulatedType, true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null // relatedTarget\n    );\n    // Dispatch the simulated event to the target element\n    e.target.dispatchEvent(simulatedEvent);\n}\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */ function simulatePointerMouseEvent(e, simulatedType) {\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable) e.preventDefault();\n    const simulatedEvent = document.createEvent(\"MouseEvents\");\n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(simulatedType, true, true, window, 1, e.screenX, e.screenY, e.clientX, e.clientY, false, false, false, false, 0, null // relatedTarget\n    );\n    // Dispatch the simulated event to the target element\n    e.target.dispatchEvent(simulatedEvent);\n}\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */ function touchstart(e) {\n    // Ignore the event if another widget is already being handled\n    if (DDTouch.touchHandled) return;\n    DDTouch.touchHandled = true;\n    // Simulate the mouse events\n    // simulateMouseEvent(e, 'mouseover');\n    // simulateMouseEvent(e, 'mousemove');\n    simulateMouseEvent(e, \"mousedown\");\n}\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */ function touchmove(e) {\n    // Ignore event if not handled by us\n    if (!DDTouch.touchHandled) return;\n    simulateMouseEvent(e, \"mousemove\");\n}\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */ function touchend(e) {\n    // Ignore event if not handled\n    if (!DDTouch.touchHandled) return;\n    // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n    if (DDTouch.pointerLeaveTimeout) {\n        window.clearTimeout(DDTouch.pointerLeaveTimeout);\n        delete DDTouch.pointerLeaveTimeout;\n    }\n    const wasDragging = !!_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement;\n    // Simulate the mouseup event\n    simulateMouseEvent(e, \"mouseup\");\n    // simulateMouseEvent(event, 'mouseout');\n    // If the touch interaction did not move, it should trigger a click\n    if (!wasDragging) {\n        simulateMouseEvent(e, \"click\");\n    }\n    // Unset the flag to allow other widgets to inherit the touch event\n    DDTouch.touchHandled = false;\n}\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */ function pointerdown(e) {\n    // console.log(\"pointer down\")\n    if (e.pointerType === \"mouse\") return;\n    e.target.releasePointerCapture(e.pointerId); // <- Important!\n}\nfunction pointerenter(e) {\n    // ignore the initial one we get on pointerdown on ourself\n    if (!_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement) {\n        // console.log('pointerenter ignored');\n        return;\n    }\n    // console.log('pointerenter');\n    if (e.pointerType === \"mouse\") return;\n    simulatePointerMouseEvent(e, \"mouseenter\");\n}\nfunction pointerleave(e) {\n    // ignore the leave on ourself we get before releasing the mouse over ourself\n    // by delaying sending the event and having the up event cancel us\n    if (!_dd_manager__WEBPACK_IMPORTED_MODULE_0__.DDManager.dragElement) {\n        // console.log('pointerleave ignored');\n        return;\n    }\n    if (e.pointerType === \"mouse\") return;\n    DDTouch.pointerLeaveTimeout = window.setTimeout(()=>{\n        delete DDTouch.pointerLeaveTimeout;\n        // console.log('pointerleave delayed');\n        simulatePointerMouseEvent(e, \"mouseleave\");\n    }, 10);\n} //# sourceMappingURL=dd-touch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/dd-touch.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/gridstack-engine.js":
/*!*********************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack-engine.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridStackEngine: () => (/* binding */ GridStackEngine)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/**\n * gridstack-engine.ts 9.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */ \n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */ class GridStackEngine {\n    constructor(opts = {}){\n        this.addedNodes = [];\n        this.removedNodes = [];\n        this.column = opts.column || 12;\n        this.maxRow = opts.maxRow;\n        this._float = opts.float;\n        this.nodes = opts.nodes || [];\n        this.onChange = opts.onChange;\n    }\n    batchUpdate(flag = true, doPack = true) {\n        if (!!this.batchMode === flag) return this;\n        this.batchMode = flag;\n        if (flag) {\n            this._prevFloat = this._float;\n            this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n            this.cleanNodes();\n            this.saveInitial(); // since begin update (which is called multiple times) won't do this\n        } else {\n            this._float = this._prevFloat;\n            delete this._prevFloat;\n            if (doPack) this._packNodes();\n            this._notify();\n        }\n        return this;\n    }\n    // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n    _useEntireRowArea(node, nn) {\n        return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n    }\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n     * return true if we moved. */ _fixCollisions(node, nn = node, collide, opt = {}) {\n        this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n        collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n        if (!collide) return false;\n        // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n        if (node._moving && !opt.nested && !this.float) {\n            if (this.swap(node, collide)) return true;\n        }\n        // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n        let area = nn;\n        if (this._useEntireRowArea(node, nn)) {\n            area = {\n                x: 0,\n                w: this.column,\n                y: nn.y,\n                h: nn.h\n            };\n            collide = this.collide(node, area, opt.skip); // force new hit\n        }\n        let didMove = false;\n        let newOpt = {\n            nested: true,\n            pack: false\n        };\n        while(collide = collide || this.collide(node, area, opt.skip)){\n            let moved;\n            // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n            // but remember that skip down so we only do this once (and push others otherwise).\n            if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float && // can take space we had, or before where we're going\n            (!this.collide(collide, {\n                ...collide,\n                y: node.y\n            }, node) || !this.collide(collide, {\n                ...collide,\n                y: nn.y - collide.h\n            }, node))) {\n                node._skipDown = node._skipDown || nn.y > node.y;\n                moved = this.moveNode(node, {\n                    ...nn,\n                    y: collide.y + collide.h,\n                    ...newOpt\n                });\n                if (collide.locked && moved) {\n                    _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(nn, node); // moving after lock become our new desired location\n                } else if (!collide.locked && moved && opt.pack) {\n                    // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n                    this._packNodes();\n                    nn.y = collide.y + collide.h;\n                    _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(node, nn);\n                }\n                didMove = didMove || moved;\n            } else {\n                // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n                moved = this.moveNode(collide, {\n                    ...collide,\n                    y: nn.y + nn.h,\n                    skip: node,\n                    ...newOpt\n                });\n            }\n            if (!moved) {\n                return didMove;\n            } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n            collide = undefined;\n        }\n        return didMove;\n    }\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */ collide(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.find((n)=>n._id !== skipId && n._id !== skip2Id && _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isIntercepted(n, area));\n    }\n    collideAll(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.filter((n)=>n._id !== skipId && n._id !== skip2Id && _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isIntercepted(n, area));\n    }\n    /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */ directionCollideCoverage(node, o, collides) {\n        if (!o.rect || !node._rect) return;\n        let r0 = node._rect; // where started\n        let r = {\n            ...o.rect\n        }; // where we are\n        // update dragged rect to show where it's coming from (above or below, etc...)\n        if (r.y > r0.y) {\n            r.h += r.y - r0.y;\n            r.y = r0.y;\n        } else {\n            r.h += r0.y - r.y;\n        }\n        if (r.x > r0.x) {\n            r.w += r.x - r0.x;\n            r.x = r0.x;\n        } else {\n            r.w += r0.x - r.x;\n        }\n        let collide;\n        let overMax = 0.5; // need >50%\n        collides.forEach((n)=>{\n            if (n.locked || !n._rect) return;\n            let r2 = n._rect; // overlapping target\n            let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n            // depending on which side we started from, compute the overlap % of coverage\n            // (ex: from above/below we only compute the max horizontal line coverage)\n            if (r0.y < r2.y) {\n                yOver = (r.y + r.h - r2.y) / r2.h;\n            } else if (r0.y + r0.h > r2.y + r2.h) {\n                yOver = (r2.y + r2.h - r.y) / r2.h;\n            }\n            if (r0.x < r2.x) {\n                xOver = (r.x + r.w - r2.x) / r2.w;\n            } else if (r0.x + r0.w > r2.x + r2.w) {\n                xOver = (r2.x + r2.w - r.x) / r2.w;\n            }\n            let over = Math.min(xOver, yOver);\n            if (over > overMax) {\n                overMax = over;\n                collide = n;\n            }\n        });\n        o.collide = collide; // save it so we don't have to find it again\n        return collide;\n    }\n    /** does a pixel coverage returning the node that has the most coverage by area */ /*\n    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n      let collide: GridStackNode;\n      let overMax = 0;\n      collides.forEach(n => {\n        if (n.locked || !n._rect) return;\n        let over = Utils.areaIntercept(r, n._rect);\n        if (over > overMax) {\n          overMax = over;\n          collide = n;\n        }\n      });\n      return {collide, over: overMax};\n    }\n    */ /** called to cache the nodes pixel rectangles used for collision detection during drag */ cacheRects(w, h, top, right, bottom, left) {\n        this.nodes.forEach((n)=>n._rect = {\n                y: n.y * h + top,\n                x: n.x * w + left,\n                w: n.w * w - left - right,\n                h: n.h * h - top - bottom\n            });\n        return this;\n    }\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */ swap(a, b) {\n        if (!b || b.locked || !a || a.locked) return false;\n        function _doSwap() {\n            let x = b.x, y = b.y;\n            b.x = a.x;\n            b.y = a.y; // b -> a position\n            if (a.h != b.h) {\n                a.x = x;\n                a.y = b.y + b.h; // a -> goes after b\n            } else if (a.w != b.w) {\n                a.x = b.x + b.w;\n                a.y = y; // a -> goes after b\n            } else {\n                a.x = x;\n                a.y = y; // a -> old b position\n            }\n            a._dirty = b._dirty = true;\n            return true;\n        }\n        let touching; // remember if we called it (vs undefined)\n        // same size and same row or column, and touching\n        if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isTouching(a, b))) return _doSwap();\n        if (touching === false) return; // IFF ran test and fail, bail out\n        // check for taking same columns (but different height) and touching\n        if (a.w === b.w && a.x === b.x && (touching || (touching = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isTouching(a, b)))) {\n            if (b.y < a.y) {\n                let t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        if (touching === false) return;\n        // check if taking same row (but different width) and touching\n        if (a.h === b.h && a.y === b.y && (touching || (touching = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isTouching(a, b)))) {\n            if (b.x < a.x) {\n                let t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        return false;\n    }\n    isAreaEmpty(x, y, w, h) {\n        let nn = {\n            x: x || 0,\n            y: y || 0,\n            w: w || 1,\n            h: h || 1\n        };\n        return !this.collide(nn);\n    }\n    /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */ compact(layout = \"compact\", doSort = true) {\n        if (this.nodes.length === 0) return this;\n        if (doSort) this.sortNodes();\n        const wasBatch = this.batchMode;\n        if (!wasBatch) this.batchUpdate();\n        const wasColumnResize = this._inColumnResize;\n        if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n        let copyNodes = this.nodes;\n        this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n        copyNodes.forEach((n, index, list)=>{\n            let after;\n            if (!n.locked) {\n                n.autoPosition = true;\n                if (layout === \"list\" && index) after = list[index - 1];\n            }\n            this.addNode(n, false, after); // 'false' for add event trigger\n        });\n        if (!wasColumnResize) delete this._inColumnResize;\n        if (!wasBatch) this.batchUpdate(false);\n        return this;\n    }\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */ set float(val) {\n        if (this._float === val) return;\n        this._float = val || false;\n        if (!val) {\n            this._packNodes()._notify();\n        }\n    }\n    /** float getter method */ get float() {\n        return this._float || false;\n    }\n    /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */ sortNodes(dir = 1, column = this.column) {\n        this.nodes = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.sort(this.nodes, dir, column);\n        return this;\n    }\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */ _packNodes() {\n        if (this.batchMode) {\n            return this;\n        }\n        this.sortNodes(); // first to last\n        if (this.float) {\n            // restore original Y pos\n            this.nodes.forEach((n)=>{\n                if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n                let newY = n.y;\n                while(newY > n._orig.y){\n                    --newY;\n                    let collide = this.collide(n, {\n                        x: n.x,\n                        y: newY,\n                        w: n.w,\n                        h: n.h\n                    });\n                    if (!collide) {\n                        n._dirty = true;\n                        n.y = newY;\n                    }\n                }\n            });\n        } else {\n            // top gravity pack\n            this.nodes.forEach((n, i)=>{\n                if (n.locked) return;\n                while(n.y > 0){\n                    let newY = i === 0 ? 0 : n.y - 1;\n                    let canBeMoved = i === 0 || !this.collide(n, {\n                        x: n.x,\n                        y: newY,\n                        w: n.w,\n                        h: n.h\n                    });\n                    if (!canBeMoved) break;\n                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n                    // and move items back. The user 'change' CB should detect changes from the original\n                    // starting position instead.\n                    n._dirty = n.y !== newY;\n                    n.y = newY;\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\n     * @param node to adjust\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\n     */ prepareNode(node, resizing) {\n        node = node || {};\n        node._id = node._id ?? GridStackEngine._idSeq++;\n        // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n            node.autoPosition = true;\n        }\n        // assign defaults for missing required fields\n        let defaults = {\n            x: 0,\n            y: 0,\n            w: 1,\n            h: 1\n        };\n        _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.defaults(node, defaults);\n        if (!node.autoPosition) {\n            delete node.autoPosition;\n        }\n        if (!node.noResize) {\n            delete node.noResize;\n        }\n        if (!node.noMove) {\n            delete node.noMove;\n        }\n        _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.sanitizeMinMax(node);\n        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n        if (typeof node.x == \"string\") {\n            node.x = Number(node.x);\n        }\n        if (typeof node.y == \"string\") {\n            node.y = Number(node.y);\n        }\n        if (typeof node.w == \"string\") {\n            node.w = Number(node.w);\n        }\n        if (typeof node.h == \"string\") {\n            node.h = Number(node.h);\n        }\n        if (isNaN(node.x)) {\n            node.x = defaults.x;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.y)) {\n            node.y = defaults.y;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.w)) {\n            node.w = defaults.w;\n        }\n        if (isNaN(node.h)) {\n            node.h = defaults.h;\n        }\n        return this.nodeBoundFix(node, resizing);\n    }\n    /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */ nodeBoundFix(node, resizing) {\n        let before = node._orig || _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos({}, node);\n        if (node.maxW) {\n            node.w = Math.min(node.w, node.maxW);\n        }\n        if (node.maxH) {\n            node.h = Math.min(node.h, node.maxH);\n        }\n        if (node.minW && node.minW <= this.column) {\n            node.w = Math.max(node.w, node.minW);\n        }\n        if (node.minH) {\n            node.h = Math.max(node.h, node.minH);\n        }\n        // if user loaded a larger than allowed widget for current # of columns,\n        // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n        // IFF we're not in the middle of column resizing!\n        const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n        if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n            let copy = {\n                ...node\n            }; // need _id + positions\n            if (copy.autoPosition || copy.x === undefined) {\n                delete copy.x;\n                delete copy.y;\n            } else copy.x = Math.min(11, copy.x);\n            copy.w = Math.min(12, copy.w || 1);\n            this.cacheOneLayout(copy, 12);\n        }\n        if (node.w > this.column) {\n            node.w = this.column;\n        } else if (node.w < 1) {\n            node.w = 1;\n        }\n        if (this.maxRow && node.h > this.maxRow) {\n            node.h = this.maxRow;\n        } else if (node.h < 1) {\n            node.h = 1;\n        }\n        if (node.x < 0) {\n            node.x = 0;\n        }\n        if (node.y < 0) {\n            node.y = 0;\n        }\n        if (node.x + node.w > this.column) {\n            if (resizing) {\n                node.w = this.column - node.x;\n            } else {\n                node.x = this.column - node.w;\n            }\n        }\n        if (this.maxRow && node.y + node.h > this.maxRow) {\n            if (resizing) {\n                node.h = this.maxRow - node.y;\n            } else {\n                node.y = this.maxRow - node.h;\n            }\n        }\n        if (!_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.samePos(node, before)) {\n            node._dirty = true;\n        }\n        return node;\n    }\n    /** returns a list of modified nodes from their original values */ getDirtyNodes(verify) {\n        // compare original x,y,w,h instead as _dirty can be a temporary state\n        if (verify) {\n            return this.nodes.filter((n)=>n._dirty && !_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.samePos(n, n._orig));\n        }\n        return this.nodes.filter((n)=>n._dirty);\n    }\n    /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */ _notify(removedNodes) {\n        if (this.batchMode || !this.onChange) return this;\n        let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n        this.onChange(dirtyNodes);\n        return this;\n    }\n    /** @internal remove dirty and last tried info */ cleanNodes() {\n        if (this.batchMode) return this;\n        this.nodes.forEach((n)=>{\n            delete n._dirty;\n            delete n._lastTried;\n        });\n        return this;\n    }\n    /** @internal called to save initial position/size to track real dirty state.\n     * Note: should be called right after we call change event (so next API is can detect changes)\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */ saveInitial() {\n        this.nodes.forEach((n)=>{\n            n._orig = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos({}, n);\n            delete n._dirty;\n        });\n        this._hasLocked = this.nodes.some((n)=>n.locked);\n        return this;\n    }\n    /** @internal restore all the nodes back to initial values (called when we leave) */ restoreInitial() {\n        this.nodes.forEach((n)=>{\n            if (_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.samePos(n, n._orig)) return;\n            _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(n, n._orig);\n            n._dirty = true;\n        });\n        this._notify();\n        return this;\n    }\n    /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n     * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n     * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n     */ findEmptyPosition(node, nodeList = this.nodes, column = this.column, after) {\n        let start = after ? after.y * column + (after.x + after.w) : 0;\n        let found = false;\n        for(let i = start; !found; ++i){\n            let x = i % column;\n            let y = Math.floor(i / column);\n            if (x + node.w > column) {\n                continue;\n            }\n            let box = {\n                x,\n                y,\n                w: node.w,\n                h: node.h\n            };\n            if (!nodeList.find((n)=>_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.isIntercepted(box, n))) {\n                if (node.x !== x || node.y !== y) node._dirty = true;\n                node.x = x;\n                node.y = y;\n                delete node.autoPosition;\n                found = true;\n            }\n        }\n        return found;\n    }\n    /** call to add the given node to our list, fixing collision and re-packing */ addNode(node, triggerAddEvent = false, after) {\n        let dup = this.nodes.find((n)=>n._id === node._id);\n        if (dup) return dup; // prevent inserting twice! return it instead.\n        // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n        node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n        delete node._temporaryRemoved;\n        delete node._removeDOM;\n        let skipCollision;\n        if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n            delete node.autoPosition; // found our slot\n            skipCollision = true;\n        }\n        this.nodes.push(node);\n        if (triggerAddEvent) {\n            this.addedNodes.push(node);\n        }\n        if (!skipCollision) this._fixCollisions(node);\n        if (!this.batchMode) {\n            this._packNodes()._notify();\n        }\n        return node;\n    }\n    removeNode(node, removeDOM = true, triggerEvent = false) {\n        if (!this.nodes.find((n)=>n._id === node._id)) {\n            // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n            return this;\n        }\n        if (triggerEvent) {\n            this.removedNodes.push(node);\n        }\n        if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n        this.nodes = this.nodes.filter((n)=>n._id !== node._id);\n        if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n        this._notify([\n            node\n        ]);\n        return this;\n    }\n    removeAll(removeDOM = true) {\n        delete this._layouts;\n        if (!this.nodes.length) return this;\n        removeDOM && this.nodes.forEach((n)=>n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        this.removedNodes = this.nodes;\n        this.nodes = [];\n        return this._notify(this.removedNodes);\n    }\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n     * others in a clone first, then apply those changes if still within specs. */ moveNodeCheck(node, o) {\n        // if (node.locked) return false;\n        if (!this.changedPosConstrain(node, o)) return false;\n        o.pack = true;\n        // simpler case: move item directly...\n        if (!this.maxRow) {\n            return this.moveNode(node, o);\n        }\n        // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n        let clonedNode;\n        let clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map((n)=>{\n                if (n._id === node._id) {\n                    clonedNode = {\n                        ...n\n                    };\n                    return clonedNode;\n                }\n                return {\n                    ...n\n                };\n            })\n        });\n        if (!clonedNode) return false;\n        // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n        // (case where widget was somehow added past our max #2449)\n        let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n        // else check if we can force a swap (float=true, or different shapes) on non-resize\n        if (!canMove && !o.resizing && o.collide) {\n            let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n            if (this.swap(node, collide)) {\n                this._notify();\n                return true;\n            }\n        }\n        if (!canMove) return false;\n        // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n        // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n        clone.nodes.filter((n)=>n._dirty).forEach((c)=>{\n            let n = this.nodes.find((a)=>a._id === c._id);\n            if (!n) return;\n            _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(n, c);\n            n._dirty = true;\n        });\n        this._notify();\n        return true;\n    }\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */ willItFit(node) {\n        delete node._willFitPos;\n        if (!this.maxRow) return true;\n        // create a clone with NO maxRow and check if still within size\n        let clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map((n)=>{\n                return {\n                    ...n\n                };\n            })\n        });\n        let n = {\n            ...node\n        }; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n        this.cleanupNode(n);\n        delete n.el;\n        delete n._id;\n        delete n.content;\n        delete n.grid;\n        clone.addNode(n);\n        if (clone.getRow() <= this.maxRow) {\n            node._willFitPos = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos({}, n);\n            return true;\n        }\n        return false;\n    }\n    /** true if x,y or w,h are different after clamping to min/max */ changedPosConstrain(node, p) {\n        // first make sure w,h are set for caller\n        p.w = p.w || node.w;\n        p.h = p.h || node.h;\n        if (node.x !== p.x || node.y !== p.y) return true;\n        // check constrained w,h\n        if (node.maxW) {\n            p.w = Math.min(p.w, node.maxW);\n        }\n        if (node.maxH) {\n            p.h = Math.min(p.h, node.maxH);\n        }\n        if (node.minW) {\n            p.w = Math.max(p.w, node.minW);\n        }\n        if (node.minH) {\n            p.h = Math.max(p.h, node.minH);\n        }\n        return node.w !== p.w || node.h !== p.h;\n    }\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */ moveNode(node, o) {\n        if (!node || /*node.locked ||*/ !o) return false;\n        let wasUndefinedPack;\n        if (o.pack === undefined && !this.batchMode) {\n            wasUndefinedPack = o.pack = true;\n        }\n        // constrain the passed in values and check if we're still changing our node\n        if (typeof o.x !== \"number\") {\n            o.x = node.x;\n        }\n        if (typeof o.y !== \"number\") {\n            o.y = node.y;\n        }\n        if (typeof o.w !== \"number\") {\n            o.w = node.w;\n        }\n        if (typeof o.h !== \"number\") {\n            o.h = node.h;\n        }\n        let resizing = node.w !== o.w || node.h !== o.h;\n        let nn = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n        _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(nn, o);\n        nn = this.nodeBoundFix(nn, resizing);\n        _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(o, nn);\n        if (!o.forceCollide && _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.samePos(node, o)) return false;\n        let prevPos = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos({}, node);\n        // check if we will need to fix collision at our new location\n        let collides = this.collideAll(node, nn, o.skip);\n        let needToMove = true;\n        if (collides.length) {\n            let activeDrag = node._moving && !o.nested;\n            // check to make sure we actually collided over 50% surface area while dragging\n            let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n            // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n            if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n                let over = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.areaIntercept(o.rect, collide._rect);\n                let a1 = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.area(o.rect);\n                let a2 = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.area(collide._rect);\n                let perc = over / (a1 < a2 ? a1 : a2);\n                if (perc > .8) {\n                    collide.grid.makeSubGrid(collide.el, undefined, node);\n                    collide = undefined;\n                }\n            }\n            if (collide) {\n                needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n            } else {\n                needToMove = false; // we didn't cover >50% for a move, skip...\n                if (wasUndefinedPack) delete o.pack;\n            }\n        }\n        // now move (to the original ask vs the collision version which might differ) and repack things\n        if (needToMove) {\n            node._dirty = true;\n            _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.copyPos(node, nn);\n        }\n        if (o.pack) {\n            this._packNodes()._notify();\n        }\n        return !_utils__WEBPACK_IMPORTED_MODULE_0__.Utils.samePos(node, prevPos); // pack might have moved things back\n    }\n    getRow() {\n        return this.nodes.reduce((row, n)=>Math.max(row, n.y + n.h), 0);\n    }\n    beginUpdate(node) {\n        if (!node._updating) {\n            node._updating = true;\n            delete node._skipDown;\n            if (!this.batchMode) this.saveInitial();\n        }\n        return this;\n    }\n    endUpdate() {\n        let n = this.nodes.find((n)=>n._updating);\n        if (n) {\n            delete n._updating;\n            delete n._skipDown;\n        }\n        return this;\n    }\n    /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n     * returning a list of widgets for serialization */ save(saveElement = true, saveCB) {\n        // use the highest layout for any saved info so we can have full detail on reload #1849\n        let len = this._layouts?.length;\n        let layout = len && this.column !== len - 1 ? this._layouts[len - 1] : null;\n        let list = [];\n        this.sortNodes();\n        this.nodes.forEach((n)=>{\n            let wl = layout?.find((l)=>l._id === n._id);\n            // use layout info fields instead if set\n            let w = {\n                ...n,\n                ...wl || {}\n            };\n            _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.removeInternalForSave(w, !saveElement);\n            if (saveCB) saveCB(n, w);\n            list.push(w);\n        });\n        return list;\n    }\n    /** @internal called whenever a node is added or moved - updates the cached layouts */ layoutsNodesChange(nodes) {\n        if (!this._layouts || this._inColumnResize) return this;\n        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n        this._layouts.forEach((layout, column)=>{\n            if (!layout || column === this.column) return this;\n            if (column < this.column) {\n                this._layouts[column] = undefined;\n            } else {\n                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n                // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n                let ratio = column / this.column;\n                nodes.forEach((node)=>{\n                    if (!node._orig) return; // didn't change (newly added ?)\n                    let n = layout.find((l)=>l._id === node._id);\n                    if (!n) return; // no cache for new nodes. Will use those values.\n                    // Y changed, push down same amount\n                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n                    if (n.y >= 0 && node.y !== node._orig.y) {\n                        n.y += node.y - node._orig.y;\n                    }\n                    // X changed, scale from new position\n                    if (node.x !== node._orig.x) {\n                        n.x = Math.round(node.x * ratio);\n                    }\n                    // width changed, scale from new width\n                    if (node.w !== node._orig.w) {\n                        n.w = Math.round(node.w * ratio);\n                    }\n                // ...height always carries over from cache\n                });\n            }\n        });\n        return this;\n    }\n    /**\n     * @internal Called to scale the widget width & position up/down based on the column change.\n     * Note we store previous layouts (especially original ones) to make it possible to go\n     * from say 12 -> 1 -> 12 and get back to where we were.\n     *\n     * @param prevColumn previous number of columns\n     * @param column  new column number\n     * @param nodes different sorted list (ex: DOM order) instead of current list\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n     */ columnChanged(prevColumn, column, nodes, layout = \"moveScale\") {\n        if (!this.nodes.length || !column || prevColumn === column) return this;\n        // simpler shortcuts layouts\n        const doCompact = layout === \"compact\" || layout === \"list\";\n        if (doCompact) {\n            this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n        }\n        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n        if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n        this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n        let newNodes = [];\n        // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n        let domOrder = false;\n        if (column === 1 && nodes?.length) {\n            domOrder = true;\n            let top = 0;\n            nodes.forEach((n)=>{\n                n.x = 0;\n                n.w = 1;\n                n.y = Math.max(n.y, top);\n                top = n.y + n.h;\n            });\n            newNodes = nodes;\n            nodes = [];\n        } else {\n            nodes = doCompact ? this.nodes : _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n        }\n        // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n        // generate next size down from where we are (looks more natural as you gradually size down).\n        if (column > prevColumn && this._layouts) {\n            const cacheNodes = this._layouts[column] || [];\n            // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n            // by pretending we came from that larger column by assigning those values as starting point\n            let lastIndex = this._layouts.length - 1;\n            if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n                prevColumn = lastIndex;\n                this._layouts[lastIndex].forEach((cacheNode)=>{\n                    let n = nodes.find((n)=>n._id === cacheNode._id);\n                    if (n) {\n                        // still current, use cache info positions\n                        if (!doCompact && !cacheNode.autoPosition) {\n                            n.x = cacheNode.x ?? n.x;\n                            n.y = cacheNode.y ?? n.y;\n                        }\n                        n.w = cacheNode.w ?? n.w;\n                        if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n                    }\n                });\n            }\n            // if we found cache re-use those nodes that are still current\n            cacheNodes.forEach((cacheNode)=>{\n                let j = nodes.findIndex((n)=>n._id === cacheNode._id);\n                if (j !== -1) {\n                    const n = nodes[j];\n                    // still current, use cache info positions\n                    if (doCompact) {\n                        n.w = cacheNode.w; // only w is used, and don't trim the list\n                        return;\n                    }\n                    if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n                        this.findEmptyPosition(cacheNode, newNodes);\n                    }\n                    if (!cacheNode.autoPosition) {\n                        n.x = cacheNode.x ?? n.x;\n                        n.y = cacheNode.y ?? n.y;\n                        n.w = cacheNode.w ?? n.w;\n                        newNodes.push(n);\n                    }\n                    nodes.splice(j, 1);\n                }\n            });\n        }\n        // much simpler layout that just compacts\n        if (doCompact) {\n            this.compact(layout, false);\n        } else {\n            // ...and add any extra non-cached ones\n            if (nodes.length) {\n                if (typeof layout === \"function\") {\n                    layout(column, prevColumn, newNodes, nodes);\n                } else if (!domOrder) {\n                    let ratio = doCompact || layout === \"none\" ? 1 : column / prevColumn;\n                    let move = layout === \"move\" || layout === \"moveScale\";\n                    let scale = layout === \"scale\" || layout === \"moveScale\";\n                    nodes.forEach((node)=>{\n                        // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n                        node.x = column === 1 ? 0 : move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1);\n                        node.w = column === 1 || prevColumn === 1 ? 1 : scale ? Math.round(node.w * ratio) || 1 : Math.min(node.w, column);\n                        newNodes.push(node);\n                    });\n                    nodes = [];\n                }\n            }\n            // finally re-layout them in reverse order (to get correct placement)\n            if (!domOrder) newNodes = _utils__WEBPACK_IMPORTED_MODULE_0__.Utils.sort(newNodes, -1, column);\n            this._inColumnResize = true; // prevent cache update\n            this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n            newNodes.forEach((node)=>{\n                this.addNode(node, false); // 'false' for add event trigger\n                delete node._orig; // make sure the commit doesn't try to restore things back to original\n            });\n        }\n        this.nodes.forEach((n)=>delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n        this.batchUpdate(false, !doCompact);\n        delete this._inColumnResize;\n        return this;\n    }\n    /**\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\n     * @param nodes list of nodes\n     * @param column corresponding column index to save it under\n     * @param clear if true, will force other caches to be removed (default false)\n     */ cacheLayout(nodes, column, clear = false) {\n        let copy = [];\n        nodes.forEach((n, i)=>{\n            n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n            copy[i] = {\n                x: n.x,\n                y: n.y,\n                w: n.w,\n                _id: n._id\n            }; // only thing we change is x,y,w and id to find it back\n        });\n        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n        this._layouts[column] = copy;\n        return this;\n    }\n    /**\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\n     * @param node single node to cache\n     * @param column corresponding column index to save it under\n     */ cacheOneLayout(n, column) {\n        n._id = n._id ?? GridStackEngine._idSeq++;\n        let l = {\n            x: n.x,\n            y: n.y,\n            w: n.w,\n            _id: n._id\n        };\n        if (n.autoPosition || n.x === undefined) {\n            delete l.x;\n            delete l.y;\n            if (n.autoPosition) l.autoPosition = true;\n        }\n        this._layouts = this._layouts || [];\n        this._layouts[column] = this._layouts[column] || [];\n        let index = this.findCacheLayout(n, column);\n        if (index === -1) this._layouts[column].push(l);\n        else this._layouts[column][index] = l;\n        return this;\n    }\n    findCacheLayout(n, column) {\n        return this._layouts?.[column]?.findIndex((l)=>l._id === n._id) ?? -1;\n    }\n    removeNodeFromLayoutCache(n) {\n        if (!this._layouts) {\n            return;\n        }\n        for(let i = 0; i < this._layouts.length; i++){\n            let index = this.findCacheLayout(n, i);\n            if (index !== -1) {\n                this._layouts[i].splice(index, 1);\n            }\n        }\n    }\n    /** called to remove all internal values but the _id */ cleanupNode(node) {\n        for(let prop in node){\n            if (prop[0] === \"_\" && prop !== \"_id\") delete node[prop];\n        }\n        return this;\n    }\n}\n/** @internal unique global internal _id counter */ GridStackEngine._idSeq = 0;\n //# sourceMappingURL=gridstack-engine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/gridstack-engine.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/gridstack.js":
/*!**************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridStack: () => (/* binding */ GridStack)\n/* harmony export */ });\n/* harmony import */ var _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridstack-engine */ \"./node_modules/gridstack/dist/gridstack-engine.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/gridstack/dist/types.js\");\n/* harmony import */ var _dd_gridstack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dd-gridstack */ \"./node_modules/gridstack/dist/dd-gridstack.js\");\n/* harmony import */ var _dd_touch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dd-touch */ \"./node_modules/gridstack/dist/dd-touch.js\");\n/* harmony import */ var _dd_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dd-manager */ \"./node_modules/gridstack/dist/dd-manager.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"GridStack\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _types__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _utils__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"GridStack\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _utils__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"GridStack\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _dd_gridstack__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"GridStack\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _dd_gridstack__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/*!\n * GridStack 9.4.0\n * https://gridstackjs.com/\n *\n * Copyright (c) 2021-2022 Alain Dumesny\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\n */ \n\n\n/*\n * and include D&D by default\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n */ \n\n\n/** global instance */ const dd = new _dd_gridstack__WEBPACK_IMPORTED_MODULE_3__.DDGridStack;\n// export all dependent file as well to make it easier for users to just import the main file\n\n\n\n\n/**\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\n * @example\n * <div class=\"grid-stack\">\n *   <div class=\"grid-stack-item\">\n *     <div class=\"grid-stack-item-content\">Item 1</div>\n *   </div>\n * </div>\n */ class GridStack {\n    /**\n     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\n     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\n     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\n     * @param options grid options (optional)\n     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\n     *\n     * @example\n     * let grid = GridStack.init();\n     *\n     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\n     * let grid = document.querySelector('.grid-stack').gridstack;\n     */ static init(options = {}, elOrString = \".grid-stack\") {\n        let el = GridStack.getGridElement(elOrString);\n        if (!el) {\n            if (typeof elOrString === \"string\") {\n                console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' + '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n            } else {\n                console.error(\"GridStack.init() no grid element was passed.\");\n            }\n            return null;\n        }\n        if (!el.gridstack) {\n            el.gridstack = new GridStack(el, _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(options));\n        }\n        return el.gridstack;\n    }\n    /**\n     * Will initialize a list of elements (given a selector) and return an array of grids.\n     * @param options grid options (optional)\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\n     *\n     * @example\n     * let grids = GridStack.initAll();\n     * grids.forEach(...)\n     */ static initAll(options = {}, selector = \".grid-stack\") {\n        let grids = [];\n        GridStack.getGridElements(selector).forEach((el)=>{\n            if (!el.gridstack) {\n                el.gridstack = new GridStack(el, _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(options));\n            }\n            grids.push(el.gridstack);\n        });\n        if (grids.length === 0) {\n            console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' + '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n        }\n        return grids;\n    }\n    /**\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\n     * JSON serialized data, including options.\n     * @param parent HTML element parent to the grid\n     * @param opt grids options used to initialize the grid, and list of children\n     */ static addGrid(parent, opt = {}) {\n        if (!parent) return null;\n        let el = parent;\n        if (el.gridstack) {\n            // already a grid - set option and load data\n            const grid = el.gridstack;\n            if (opt) grid.opts = {\n                ...grid.opts,\n                ...opt\n            };\n            if (opt.children !== undefined) grid.load(opt.children);\n            return grid;\n        }\n        // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\n        const parentIsGrid = parent.classList.contains(\"grid-stack\");\n        if (!parentIsGrid || GridStack.addRemoveCB) {\n            if (GridStack.addRemoveCB) {\n                el = GridStack.addRemoveCB(parent, opt, true, true);\n            } else {\n                let doc = document.implementation.createHTMLDocument(\"\"); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || \"\"}\"></div>`;\n                el = doc.body.children[0];\n                parent.appendChild(el);\n            }\n        }\n        // create grid class and load any children\n        let grid = GridStack.init(opt, el);\n        return grid;\n    }\n    /** call this method to register your engine instead of the default one.\n     * See instead `GridStackOptions.engineClass` if you only need to\n     * replace just one instance.\n     */ static registerEngine(engineClass) {\n        GridStack.engineClass = engineClass;\n    }\n    /** @internal create placeholder DIV as needed */ get placeholder() {\n        if (!this._placeholder) {\n            let placeholderChild = document.createElement(\"div\"); // child so padding match item-content\n            placeholderChild.className = \"placeholder-content\";\n            if (this.opts.placeholderText) {\n                placeholderChild.innerHTML = this.opts.placeholderText;\n            }\n            this._placeholder = document.createElement(\"div\");\n            this._placeholder.classList.add(this.opts.placeholderClass, _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.itemClass, this.opts.itemClass);\n            this.placeholder.appendChild(placeholderChild);\n        }\n        return this._placeholder;\n    }\n    /**\n     * Construct a grid item from the given element and options\n     * @param el\n     * @param opts\n     */ constructor(el, opts = {}){\n        /** @internal */ this._gsEventHandler = {};\n        /** @internal extra row added when dragging at the bottom of the grid */ this._extraDragRow = 0;\n        this.el = el; // exposed HTML element to the user\n        opts = opts || {}; // handles null/undefined/0\n        if (!el.classList.contains(\"grid-stack\")) {\n            this.el.classList.add(\"grid-stack\");\n        }\n        // if row property exists, replace minRow and maxRow instead\n        if (opts.row) {\n            opts.minRow = opts.maxRow = opts.row;\n            delete opts.row;\n        }\n        let rowAttr = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-row\"));\n        // flag only valid in sub-grids (handled by parent, not here)\n        if (opts.column === \"auto\") {\n            delete opts.column;\n        }\n        // save original setting so we can restore on save\n        if (opts.alwaysShowResizeHandle !== undefined) {\n            opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\n        }\n        // elements DOM attributes override any passed options (like CSS style) - merge the two together\n        let defaults = {\n            ..._utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(_types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults),\n            column: _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-column\")) || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.column,\n            minRow: rowAttr ? rowAttr : _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-min-row\")) || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.minRow,\n            maxRow: rowAttr ? rowAttr : _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-max-row\")) || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.maxRow,\n            staticGrid: _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-static\")) || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.staticGrid,\n            draggable: {\n                handle: (opts.handleClass ? \".\" + opts.handleClass : opts.handle ? opts.handle : \"\") || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.draggable.handle\n            },\n            removableOptions: {\n                accept: opts.itemClass || _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.removableOptions.accept,\n                decline: _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.removableOptions.decline\n            }\n        };\n        if (el.getAttribute(\"gs-animate\")) {\n            defaults.animate = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-animate\"));\n        }\n        this.opts = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.defaults(opts, defaults);\n        opts = null; // make sure we use this.opts instead\n        this._initMargin(); // part of settings defaults...\n        // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\n        if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\n            this._prevColumn = this.getColumn();\n            this.opts.column = 1;\n        }\n        if (this.opts.rtl === \"auto\") {\n            this.opts.rtl = el.style.direction === \"rtl\";\n        }\n        if (this.opts.rtl) {\n            this.el.classList.add(\"grid-stack-rtl\");\n        }\n        // check if we're been nested, and if so update our style and keep pointer around (used during save)\n        const grandParent = this.el.parentElement?.parentElement;\n        let parentGridItem = grandParent?.classList.contains(_types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\n        if (parentGridItem) {\n            parentGridItem.subGrid = this;\n            this.parentGridItem = parentGridItem;\n            this.el.classList.add(\"grid-stack-nested\");\n            parentGridItem.el.classList.add(\"grid-stack-sub-grid\");\n        }\n        this._isAutoCellHeight = this.opts.cellHeight === \"auto\";\n        if (this._isAutoCellHeight || this.opts.cellHeight === \"initial\") {\n            // make the cell content square initially (will use resize/column event to keep it square)\n            this.cellHeight(undefined, false);\n        } else {\n            // append unit if any are set\n            if (typeof this.opts.cellHeight == \"number\" && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.cellHeightUnit) {\n                this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\n                delete this.opts.cellHeightUnit;\n            }\n            this.cellHeight(this.opts.cellHeight, false);\n        }\n        // see if we need to adjust auto-hide\n        if (this.opts.alwaysShowResizeHandle === \"mobile\") {\n            this.opts.alwaysShowResizeHandle = _dd_touch__WEBPACK_IMPORTED_MODULE_4__.isTouch;\n        }\n        this._styleSheetClass = \"gs-id-\" + _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__.GridStackEngine._idSeq++;\n        this.el.classList.add(this._styleSheetClass);\n        this._setStaticClass();\n        let engineClass = this.opts.engineClass || GridStack.engineClass || _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__.GridStackEngine;\n        this.engine = new engineClass({\n            column: this.getColumn(),\n            float: this.opts.float,\n            maxRow: this.opts.maxRow,\n            onChange: (cbNodes)=>{\n                let maxH = 0;\n                this.engine.nodes.forEach((n)=>{\n                    maxH = Math.max(maxH, n.y + n.h);\n                });\n                cbNodes.forEach((n)=>{\n                    let el = n.el;\n                    if (!el) return;\n                    if (n._removeDOM) {\n                        if (el) el.remove();\n                        delete n._removeDOM;\n                    } else {\n                        this._writePosAttr(el, n);\n                    }\n                });\n                this._updateStyles(false, maxH); // false = don't recreate, just append if need be\n            }\n        });\n        if (this.opts.auto) {\n            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\n            this.getGridItems().forEach((el)=>this._prepareElement(el));\n            this.batchUpdate(false);\n        }\n        // load any passed in children as well, which overrides any DOM layout done above\n        if (this.opts.children) {\n            let children = this.opts.children;\n            delete this.opts.children;\n            if (children.length) this.load(children); // don't load empty\n        }\n        this.setAnimation(this.opts.animate);\n        this._updateStyles();\n        this.el.classList.add(\"gs-\" + this.opts.column);\n        // dynamic grids require pausing during drag to detect over to nest vs push\n        if (this.opts.subGridDynamic && !_dd_manager__WEBPACK_IMPORTED_MODULE_5__.DDManager.pauseDrag) _dd_manager__WEBPACK_IMPORTED_MODULE_5__.DDManager.pauseDrag = true;\n        if (this.opts.draggable?.pause !== undefined) _dd_manager__WEBPACK_IMPORTED_MODULE_5__.DDManager.pauseDrag = this.opts.draggable.pause;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this._updateResizeEvent();\n    }\n    /**\n     * add a new widget and returns it.\n     *\n     * Widget will be always placed even if result height is more than actual grid height.\n     * You need to use `willItFit()` before calling addWidget for additional check.\n     * See also `makeWidget()`.\n     *\n     * @example\n     * let grid = GridStack.init();\n     * grid.addWidget({w: 3, content: 'hello'});\n     * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\n     *\n     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\n     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\n     */ addWidget(els, options) {\n        function isGridStackWidget(w) {\n            return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\n        }\n        let el;\n        let node;\n        if (typeof els === \"string\") {\n            let doc = document.implementation.createHTMLDocument(\"\"); // IE needs a param\n            doc.body.innerHTML = els;\n            el = doc.body.children[0];\n        } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\n            node = options = els;\n            if (node?.el) {\n                el = node.el; // re-use element stored in the node\n            } else if (GridStack.addRemoveCB) {\n                el = GridStack.addRemoveCB(this.el, options, true, false);\n            } else {\n                let content = options?.content || \"\";\n                let doc = document.implementation.createHTMLDocument(\"\"); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || \"\"}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\n                el = doc.body.children[0];\n            }\n        } else {\n            el = els;\n        }\n        if (!el) return;\n        // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\n        node = el.gridstackNode;\n        if (node && el.parentElement === this.el && this.engine.nodes.find((n)=>n._id === node._id)) return el;\n        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\n        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\n        // So make sure we load any DOM attributes that are not specified in passed in options (which override)\n        let domAttr = this._readAttr(el);\n        options = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(options) || {}; // make a copy before we modify in case caller re-uses it\n        _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.defaults(options, domAttr);\n        node = this.engine.prepareNode(options);\n        this._writeAttr(el, options);\n        if (this._insertNotAppend) {\n            this.el.prepend(el);\n        } else {\n            this.el.appendChild(el);\n        }\n        this.makeWidget(el, options);\n        return el;\n    }\n    /**\n     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\n     * from the parent's subGrid options.\n     * @param el gridItem element to convert\n     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\n     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\n     * @returns newly created grid\n     */ makeSubGrid(el, ops, nodeToAdd, saveContent = true) {\n        let node = el.gridstackNode;\n        if (!node) {\n            node = this.makeWidget(el).gridstackNode;\n        }\n        if (node.subGrid?.el) return node.subGrid; // already done\n        // find the template subGrid stored on a parent as fallback...\n        let subGridTemplate; // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let grid = this;\n        while(grid && !subGridTemplate){\n            subGridTemplate = grid.opts?.subGridOpts;\n            grid = grid.parentGridItem?.grid;\n        }\n        //... and set the create options\n        ops = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep({\n            ...subGridTemplate || {},\n            children: undefined,\n            ...ops || node.subGridOpts\n        });\n        node.subGridOpts = ops;\n        // if column special case it set, remember that flag and set default\n        let autoColumn;\n        if (ops.column === \"auto\") {\n            autoColumn = true;\n            ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\n            ops.disableOneColumnMode = true; // driven by parent\n        }\n        // if we're converting an existing full item, move over the content to be the first sub item in the new grid\n        let content = node.el.querySelector(\".grid-stack-item-content\");\n        let newItem;\n        let newItemOpt;\n        if (saveContent) {\n            this._removeDD(node.el); // remove D&D since it's set on content div\n            newItemOpt = {\n                ...node,\n                x: 0,\n                y: 0\n            };\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.removeInternalForSave(newItemOpt);\n            delete newItemOpt.subGridOpts;\n            if (node.content) {\n                newItemOpt.content = node.content;\n                delete node.content;\n            }\n            if (GridStack.addRemoveCB) {\n                newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\n            } else {\n                let doc = document.implementation.createHTMLDocument(\"\"); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\n                newItem = doc.body.children[0];\n                newItem.appendChild(content);\n                doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\n                content = doc.body.children[0];\n                node.el.appendChild(content);\n            }\n            this._prepareDragDropByNode(node); // ... and restore original D&D\n        }\n        // if we're adding an additional item, make the container large enough to have them both\n        if (nodeToAdd) {\n            let w = autoColumn ? ops.column : node.w;\n            let h = node.h + nodeToAdd.h;\n            let style = node.el.style;\n            style.transition = \"none\"; // show up instantly so we don't see scrollbar with nodeToAdd\n            this.update(node.el, {\n                w,\n                h\n            });\n            setTimeout(()=>style.transition = null); // recover animation\n        }\n        let subGrid = node.subGrid = GridStack.addGrid(content, ops);\n        if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\n        if (autoColumn) subGrid._autoColumn = true;\n        // add the original content back as a child of hte newly created grid\n        if (saveContent) {\n            subGrid.addWidget(newItem, newItemOpt);\n        }\n        // now add any additional node\n        if (nodeToAdd) {\n            if (nodeToAdd._moving) {\n                // create an artificial event even for the just created grid to receive this item\n                window.setTimeout(()=>_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.simulateMouseEvent(nodeToAdd._event, \"mouseenter\", subGrid.el), 0);\n            } else {\n                subGrid.addWidget(node.el, node);\n            }\n        }\n        return subGrid;\n    }\n    /**\n     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\n     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\n     */ removeAsSubGrid(nodeThatRemoved) {\n        let pGrid = this.parentGridItem?.grid;\n        if (!pGrid) return;\n        pGrid.batchUpdate();\n        pGrid.removeWidget(this.parentGridItem.el, true, true);\n        this.engine.nodes.forEach((n)=>{\n            // migrate any children over and offsetting by our location\n            n.x += this.parentGridItem.x;\n            n.y += this.parentGridItem.y;\n            pGrid.addWidget(n.el, n);\n        });\n        pGrid.batchUpdate(false);\n        if (this.parentGridItem) delete this.parentGridItem.subGrid;\n        delete this.parentGridItem;\n        // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\n        if (nodeThatRemoved) {\n            window.setTimeout(()=>_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.simulateMouseEvent(nodeThatRemoved._event, \"mouseenter\", pGrid.el), 0);\n        }\n    }\n    /**\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\n     * be removed.\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\n     * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\n     * @returns list of widgets or full grid option, including .children list of widgets\n     */ save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB) {\n        // return copied GridStackWidget (with optionally .el) we can modify at will...\n        let list = this.engine.save(saveContent, saveCB);\n        // check for HTML content and nested grids\n        list.forEach((n)=>{\n            if (saveContent && n.el && !n.subGrid && !saveCB) {\n                let sub = n.el.querySelector(\".grid-stack-item-content\");\n                n.content = sub ? sub.innerHTML : undefined;\n                if (!n.content) delete n.content;\n            } else {\n                if (!saveContent && !saveCB) {\n                    delete n.content;\n                }\n                // check for nested grid\n                if (n.subGrid?.el) {\n                    const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\n                    n.subGridOpts = saveGridOpt ? listOrOpt : {\n                        children: listOrOpt\n                    };\n                    delete n.subGrid;\n                }\n            }\n            delete n.el;\n        });\n        // check if save entire grid options (needed for recursive) + children...\n        if (saveGridOpt) {\n            let o = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(this.opts);\n            // delete default values that will be recreated on launch\n            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\n                o.margin = o.marginTop;\n                delete o.marginTop;\n                delete o.marginRight;\n                delete o.marginBottom;\n                delete o.marginLeft;\n            }\n            if (o.rtl === (this.el.style.direction === \"rtl\")) {\n                o.rtl = \"auto\";\n            }\n            if (this._isAutoCellHeight) {\n                o.cellHeight = \"auto\";\n            }\n            if (this._autoColumn) {\n                o.column = \"auto\";\n                delete o.disableOneColumnMode;\n            }\n            const origShow = o._alwaysShowResizeHandle;\n            delete o._alwaysShowResizeHandle;\n            if (origShow !== undefined) {\n                o.alwaysShowResizeHandle = origShow;\n            } else {\n                delete o.alwaysShowResizeHandle;\n            }\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.removeInternalAndSame(o, _types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults);\n            o.children = list;\n            return o;\n        }\n        return list;\n    }\n    /**\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\n     *\n     * @param layout list of widgets definition to update/create\n     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\n     * the user control of insertion.\n     *\n     * @example\n     * see http://gridstackjs.com/demo/serialization.html\n     */ load(items, addRemove = GridStack.addRemoveCB || true) {\n        items = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(items); // so we can mod\n        // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\n        const haveCoord = items.some((w)=>w.x !== undefined || w.y !== undefined);\n        if (haveCoord) items = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.sort(items, -1, this._prevColumn || this.getColumn());\n        this._insertNotAppend = haveCoord; // if we create in reverse order...\n        // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\n        // the original wanted layout so we can scale back up correctly #1471\n        if (this._prevColumn && this._prevColumn !== this.opts.column && items.some((n)=>(n.x || 0) + n.w > this.opts.column)) {\n            this._ignoreLayoutsNodeChange = true; // skip layout update\n            this.engine.cacheLayout(items, this._prevColumn, true);\n        }\n        // if given a different callback, temporally set it as global option so creating will use it\n        const prevCB = GridStack.addRemoveCB;\n        if (typeof addRemove === \"function\") GridStack.addRemoveCB = addRemove;\n        let removed = [];\n        this.batchUpdate();\n        // see if any items are missing from new layout and need to be removed first\n        if (addRemove) {\n            let copyNodes = [\n                ...this.engine.nodes\n            ]; // don't loop through array you modify\n            copyNodes.forEach((n)=>{\n                if (!n.id) return;\n                let item = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.find(items, n.id);\n                if (!item) {\n                    if (GridStack.addRemoveCB) GridStack.addRemoveCB(this.el, n, false, false);\n                    removed.push(n); // batch keep track\n                    this.removeWidget(n.el, true, false);\n                }\n            });\n        }\n        // now add/update the widgets - starting with removing items in the new layout we will reposition\n        // to reduce collision and add no-coord ones at next available spot\n        let updateNodes = [];\n        this.engine.nodes = this.engine.nodes.filter((n)=>{\n            if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.find(items, n.id)) {\n                updateNodes.push(n);\n                return false;\n            } // remove if found from list\n            return true;\n        });\n        let widthChanged = false;\n        items.forEach((w)=>{\n            let item = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.find(updateNodes, w.id);\n            if (item) {\n                // if item sizes to content, re-use the exiting height so it's a better guess at the final size 9same if width doesn't change)\n                if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(item)) w.h = item.h;\n                // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\n                if (w.autoPosition || w.x === undefined || w.y === undefined) {\n                    w.w = w.w || item.w;\n                    w.h = w.h || item.h;\n                    this.engine.findEmptyPosition(w);\n                }\n                widthChanged = widthChanged || w.w !== undefined && w.w !== item.w;\n                // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\n                this.engine.nodes.push(item);\n                if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.samePos(item, w)) {\n                    this.moveNode(item, {\n                        ...w,\n                        forceCollide: true\n                    });\n                    _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.copyPos(w, item, true);\n                }\n                this.update(item.el, w);\n                if (w.subGridOpts?.children) {\n                    let sub = item.el.querySelector(\".grid-stack\");\n                    if (sub && sub.gridstack) {\n                        sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\n                        this._insertNotAppend = true; // got reset by above call\n                    }\n                }\n            } else if (addRemove) {\n                this.addWidget(w);\n            }\n        });\n        this.engine.removedNodes = removed;\n        this.doContentResize(widthChanged, true); // we only need to wait for animation if we changed any widths\n        this.batchUpdate(false);\n        // after commit, clear that flag\n        delete this._ignoreLayoutsNodeChange;\n        delete this._insertNotAppend;\n        prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\n        return this;\n    }\n    /**\n     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\n     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\n     */ batchUpdate(flag = true) {\n        this.engine.batchUpdate(flag);\n        if (!flag) {\n            this._updateContainerHeight();\n            this._triggerRemoveEvent();\n            this._triggerAddEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Gets current cell height.\n     */ getCellHeight(forcePixel = false) {\n        if (this.opts.cellHeight && this.opts.cellHeight !== \"auto\" && (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === \"px\")) {\n            return this.opts.cellHeight;\n        }\n        // else get first cell height\n        let el = this.el.querySelector(\".\" + this.opts.itemClass);\n        if (el) {\n            let height = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-h\")) || 1; // since we don't write 1 anymore\n            return Math.round(el.offsetHeight / height);\n        }\n        // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\n        let rows = parseInt(this.el.getAttribute(\"gs-current-row\"));\n        return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;\n    }\n    /**\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\n     * This method rebuilds an internal CSS style sheet.\n     * Note: You can expect performance issues if call this method too often.\n     *\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\n     * if pass 0 the CSS will be generated by the application instead.\n     * @param update (Optional) if false, styles will not be updated\n     *\n     * @example\n     * grid.cellHeight(100); // same as 100px\n     * grid.cellHeight('70px');\n     * grid.cellHeight(grid.cellWidth() * 1.2);\n     */ cellHeight(val, update = true) {\n        // if not called internally, check if we're changing mode\n        if (update && val !== undefined) {\n            if (this._isAutoCellHeight !== (val === \"auto\")) {\n                this._isAutoCellHeight = val === \"auto\";\n                this._updateResizeEvent();\n            }\n        }\n        if (val === \"initial\" || val === \"auto\") {\n            val = undefined;\n        }\n        // make item content be square\n        if (val === undefined) {\n            let marginDiff = -this.opts.marginRight - this.opts.marginLeft + this.opts.marginTop + this.opts.marginBottom;\n            val = this.cellWidth() + marginDiff;\n        }\n        let data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(val);\n        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\n            return this;\n        }\n        this.opts.cellHeightUnit = data.unit;\n        this.opts.cellHeight = data.h;\n        this.doContentResize(false, true); // no anim wait, but use attributes since we only change row height\n        if (update) {\n            this._updateStyles(true); // true = force re-create for current # of rows\n        }\n        return this;\n    }\n    /** Gets current cell width. */ cellWidth() {\n        return this._widthOrContainer() / this.getColumn();\n    }\n    /** return our expected width (or parent) for 1 column check */ _widthOrContainer() {\n        // use `offsetWidth` or `clientWidth` (no scrollbar) ?\n        // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\n        return this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth;\n    }\n    /**\n     * re-layout grid items to reclaim any empty space. Options are:\n     * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\n     * 'compact' might re-order items to fill any empty space\n     *\n     * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\n     */ compact(layout = \"compact\", doSort = true) {\n        this.engine.compact(layout, doSort);\n        this._triggerChangeEvent();\n        return this;\n    }\n    /**\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\n     * as well as cache the original layout so you can revert back to previous positions without loss.\n     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\n     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\n     * @param column - Integer > 0 (default 12).\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\n     */ column(column, layout = \"moveScale\") {\n        if (!column || column < 1 || this.opts.column === column) return this;\n        let oldColumn = this.getColumn();\n        // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\n        // then remember the original columns so we can restore.\n        if (column === 1) {\n            this._prevColumn = oldColumn;\n        } else {\n            delete this._prevColumn;\n        }\n        this.el.classList.remove(\"gs-\" + oldColumn);\n        this.el.classList.add(\"gs-\" + column);\n        this.opts.column = this.engine.column = column;\n        // update the items now - see if the dom order nodes should be passed instead (else default to current list)\n        let domNodes;\n        if (column === 1 && this.opts.oneColumnModeDomSort) {\n            domNodes = [];\n            this.getGridItems().forEach((el)=>{\n                if (el.gridstackNode) {\n                    domNodes.push(el.gridstackNode);\n                }\n            });\n            if (!domNodes.length) {\n                domNodes = undefined;\n            }\n        }\n        this.engine.columnChanged(oldColumn, column, domNodes, layout);\n        if (this._isAutoCellHeight) this.cellHeight();\n        this.doContentResize();\n        // and trigger our event last...\n        this._ignoreLayoutsNodeChange = true; // skip layout update\n        this._triggerChangeEvent();\n        delete this._ignoreLayoutsNodeChange;\n        return this;\n    }\n    /**\n     * get the number of columns in the grid (default 12)\n     */ getColumn() {\n        return this.opts.column;\n    }\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */ getGridItems() {\n        return Array.from(this.el.children).filter((el)=>el.matches(\".\" + this.opts.itemClass) && !el.matches(\".\" + this.opts.placeholderClass));\n    }\n    /**\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\n     */ destroy(removeDOM = true) {\n        if (!this.el) return; // prevent multiple calls\n        this.offAll();\n        this._updateResizeEvent(true);\n        this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\n        this.setAnimation(false);\n        if (!removeDOM) {\n            this.removeAll(removeDOM);\n            this.el.classList.remove(this._styleSheetClass);\n            this.el.removeAttribute(\"gs-current-row\");\n        } else {\n            this.el.parentNode.removeChild(this.el);\n        }\n        this._removeStylesheet();\n        if (this.parentGridItem) delete this.parentGridItem.subGrid;\n        delete this.parentGridItem;\n        delete this.opts;\n        delete this._placeholder;\n        delete this.engine;\n        delete this.el.gridstack; // remove circular dependency that would prevent a freeing\n        delete this.el;\n        return this;\n    }\n    /**\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\n     */ float(val) {\n        if (this.opts.float !== val) {\n            this.opts.float = this.engine.float = val;\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * get the current float mode\n     */ getFloat() {\n        return this.engine.float;\n    }\n    /**\n     * Get the position of the cell under a pixel on screen.\n     * @param position the position of the pixel to resolve in\n     * absolute coordinates, as an object with top and left properties\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\n     * Useful when grid is within `position: relative` element\n     *\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\n     */ getCellFromPixel(position, useDocRelative = false) {\n        let box = this.el.getBoundingClientRect();\n        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\n        let containerPos;\n        if (useDocRelative) {\n            containerPos = {\n                top: box.top + document.documentElement.scrollTop,\n                left: box.left\n            };\n        // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\n        } else {\n            containerPos = {\n                top: this.el.offsetTop,\n                left: this.el.offsetLeft\n            };\n        // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\n        }\n        let relativeLeft = position.left - containerPos.left;\n        let relativeTop = position.top - containerPos.top;\n        let columnWidth = box.width / this.getColumn();\n        let rowHeight = box.height / parseInt(this.el.getAttribute(\"gs-current-row\"));\n        return {\n            x: Math.floor(relativeLeft / columnWidth),\n            y: Math.floor(relativeTop / rowHeight)\n        };\n    }\n    /** returns the current number of rows, which will be at least `minRow` if set */ getRow() {\n        return Math.max(this.engine.getRow(), this.opts.minRow);\n    }\n    /**\n     * Checks if specified area is empty.\n     * @param x the position x.\n     * @param y the position y.\n     * @param w the width of to check\n     * @param h the height of to check\n     */ isAreaEmpty(x, y, w, h) {\n        return this.engine.isAreaEmpty(x, y, w, h);\n    }\n    /**\n     * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\n     * Makes the given element a widget and returns it.\n     * @param els widget or single selector to convert.\n     * @param options widget definition to use instead of reading attributes or using default sizing values\n     *\n     * @example\n     * let grid = GridStack.init();\n     * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\n     * grid.el.appendChild('<div id=\"2\"></div>');\n     * grid.makeWidget('1');\n     * grid.makeWidget('2', {w:2, content: 'hello'});\n     */ makeWidget(els, options) {\n        let el = GridStack.getElement(els);\n        this._prepareElement(el, true, options);\n        const node = el.gridstackNode;\n        this._updateContainerHeight();\n        this.doContentResize(false, false, node);\n        // see if there is a sub-grid to create\n        if (node.subGridOpts) {\n            this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\n        }\n        // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\n        // we don't override the larger 12 column layout that was already saved. #1985\n        if (this._prevColumn && this.opts.column === 1) {\n            this._ignoreLayoutsNodeChange = true;\n        }\n        this._triggerAddEvent();\n        this._triggerChangeEvent();\n        delete this._ignoreLayoutsNodeChange;\n        return el;\n    }\n    /**\n     * Event handler that extracts our CustomEvent data out automatically for receiving custom\n     * notifications (see doc for supported events)\n     * @param name of the event (see possible values) or list of names space separated\n     * @param callback function called with event and optional second/third param\n     * (see README documentation for each signature).\n     *\n     * @example\n     * grid.on('added', function(e, items) { log('added ', items)} );\n     * or\n     * grid.on('added removed change', function(e, items) { log(e.type, items)} );\n     *\n     * Note: in some cases it is the same as calling native handler and parsing the event.\n     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\n     *\n     */ on(name, callback) {\n        // check for array of names being passed instead\n        if (name.indexOf(\" \") !== -1) {\n            let names = name.split(\" \");\n            names.forEach((name)=>this.on(name, callback));\n            return this;\n        }\n        if (name === \"change\" || name === \"added\" || name === \"removed\" || name === \"enable\" || name === \"disable\") {\n            // native CustomEvent handlers - cash the generic handlers so we can easily remove\n            let noData = name === \"enable\" || name === \"disable\";\n            if (noData) {\n                this._gsEventHandler[name] = (event)=>callback(event);\n            } else {\n                this._gsEventHandler[name] = (event)=>callback(event, event.detail);\n            }\n            this.el.addEventListener(name, this._gsEventHandler[name]);\n        } else if (name === \"drag\" || name === \"dragstart\" || name === \"dragstop\" || name === \"resizestart\" || name === \"resize\" || name === \"resizestop\" || name === \"dropped\" || name === \"resizecontent\") {\n            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\n            // do same for start event to make it easier...\n            this._gsEventHandler[name] = callback;\n        } else {\n            console.log(\"GridStack.on(\" + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\n        }\n        return this;\n    }\n    /**\n     * unsubscribe from the 'on' event below\n     * @param name of the event (see possible values)\n     */ off(name) {\n        // check for array of names being passed instead\n        if (name.indexOf(\" \") !== -1) {\n            let names = name.split(\" \");\n            names.forEach((name)=>this.off(name));\n            return this;\n        }\n        if (name === \"change\" || name === \"added\" || name === \"removed\" || name === \"enable\" || name === \"disable\") {\n            // remove native CustomEvent handlers\n            if (this._gsEventHandler[name]) {\n                this.el.removeEventListener(name, this._gsEventHandler[name]);\n            }\n        }\n        delete this._gsEventHandler[name];\n        return this;\n    }\n    /** remove all event handlers */ offAll() {\n        Object.keys(this._gsEventHandler).forEach((key)=>this.off(key));\n        return this;\n    }\n    /**\n     * Removes widget from the grid.\n     * @param el  widget or selector to modify\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\n     */ removeWidget(els, removeDOM = true, triggerEvent = true) {\n        GridStack.getElements(els).forEach((el)=>{\n            if (el.parentElement && el.parentElement !== this.el) return; // not our child!\n            let node = el.gridstackNode;\n            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\n            if (!node) {\n                node = this.engine.nodes.find((n)=>el === n.el);\n            }\n            if (!node) return;\n            if (GridStack.addRemoveCB) {\n                GridStack.addRemoveCB(this.el, node, false, false);\n            }\n            // remove our DOM data (circular link) and drag&drop permanently\n            delete el.gridstackNode;\n            this._removeDD(el);\n            this.engine.removeNode(node, removeDOM, triggerEvent);\n            if (removeDOM && el.parentElement) {\n                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\n            }\n        });\n        if (triggerEvent) {\n            this._triggerRemoveEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Removes all widgets from the grid.\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\n     */ removeAll(removeDOM = true) {\n        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\n        this.engine.nodes.forEach((n)=>{\n            delete n.el.gridstackNode;\n            this._removeDD(n.el);\n        });\n        this.engine.removeAll(removeDOM);\n        this._triggerRemoveEvent();\n        return this;\n    }\n    /**\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\n     * @param doAnimate if true the grid will animate.\n     */ setAnimation(doAnimate) {\n        if (doAnimate) {\n            this.el.classList.add(\"grid-stack-animate\");\n        } else {\n            this.el.classList.remove(\"grid-stack-animate\");\n        }\n        return this;\n    }\n    /**\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\n     * Also toggle the grid-stack-static class.\n     * @param val if true the grid become static.\n     * @param updateClass true (default) if css class gets updated\n     * @param recurse true (default) if sub-grids also get updated\n     */ setStatic(val, updateClass = true, recurse = true) {\n        if (!!this.opts.staticGrid === val) return this;\n        val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this.engine.nodes.forEach((n)=>{\n            this._prepareDragDropByNode(n); // either delete or init Drag&drop\n            if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\n        });\n        if (updateClass) {\n            this._setStaticClass();\n        }\n        return this;\n    }\n    /**\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\n     */ update(els, opt) {\n        // support legacy call for now ?\n        if (arguments.length > 2) {\n            console.warn(\"gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon\");\n            // eslint-disable-next-line prefer-rest-params\n            let a = arguments, i = 1;\n            opt = {\n                x: a[i++],\n                y: a[i++],\n                w: a[i++],\n                h: a[i++]\n            };\n            return this.update(els, opt);\n        }\n        GridStack.getElements(els).forEach((el)=>{\n            let n = el?.gridstackNode;\n            if (!n) return;\n            let w = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\n            delete w.autoPosition;\n            delete w.id;\n            // move/resize widget if anything changed\n            let keys = [\n                \"x\",\n                \"y\",\n                \"w\",\n                \"h\"\n            ];\n            let m;\n            if (keys.some((k)=>w[k] !== undefined && w[k] !== n[k])) {\n                m = {};\n                keys.forEach((k)=>{\n                    m[k] = w[k] !== undefined ? w[k] : n[k];\n                    delete w[k];\n                });\n            }\n            // for a move as well IFF there is any min/max fields set\n            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\n                m = {}; // will use node position but validate values\n            }\n            // check for content changing\n            if (w.content !== undefined) {\n                const itemContent = el.querySelector(\".grid-stack-item-content\");\n                if (itemContent && itemContent.innerHTML !== w.content) {\n                    itemContent.innerHTML = w.content;\n                    // restore any sub-grid back\n                    if (n.subGrid?.el) {\n                        itemContent.appendChild(n.subGrid.el);\n                        if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\n                    }\n                }\n                delete w.content;\n            }\n            // any remaining fields are assigned, but check for dragging changes, resize constrain\n            let changed = false;\n            let ddChanged = false;\n            for(const key in w){\n                if (key[0] !== \"_\" && n[key] !== w[key]) {\n                    n[key] = w[key];\n                    changed = true;\n                    ddChanged = ddChanged || !this.opts.staticGrid && (key === \"noResize\" || key === \"noMove\" || key === \"locked\");\n                }\n            }\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.sanitizeMinMax(n);\n            // finally move the widget\n            if (m !== undefined) this.moveNode(n, m);\n            if (changed) {\n                this._writeAttr(el, n);\n            }\n            if (ddChanged) {\n                this._prepareDragDropByNode(n);\n            }\n        });\n        return this;\n    }\n    moveNode(n, m) {\n        this.engine.cleanNodes().beginUpdate(n).moveNode(n, m);\n        this._updateContainerHeight();\n        this._triggerChangeEvent();\n        this.engine.endUpdate();\n    }\n    /**\n     * Updates widget height to match the content height to avoid v-scrollbar or dead space.\n     * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\n     * useAttrSize set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\n     */ resizeToContent(el, useAttrSize = false) {\n        if (!el) return;\n        el.classList.remove(\"size-to-content-max\");\n        if (!el.clientHeight) return; // 0 when hidden, skip\n        let n = el.gridstackNode;\n        if (!n) return;\n        const grid = n.grid;\n        if (!grid) return;\n        if (el.parentElement !== grid.el) return; // skip if we are not inside a grid\n        const cell = grid.getCellHeight();\n        if (!cell) return;\n        let height = useAttrSize && n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\n        let item;\n        if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\n        if (!item) item = el.querySelector(GridStack.resizeToContentParent);\n        if (!item) return;\n        const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\n        const itemH = useAttrSize && n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\n        let wantedH;\n        if (n.subGrid) {\n            // sub-grid - use their actual row count * their cell height\n            wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight();\n        } else {\n            // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\n            const child = item.firstElementChild;\n            if (!child) {\n                console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);\n                return;\n            }\n            wantedH = child.getBoundingClientRect().height || itemH;\n        }\n        if (itemH === wantedH) return;\n        height += wantedH - itemH;\n        let h = Math.ceil(height / cell);\n        // check for min/max and special sizing\n        const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent : 0;\n        if (softMax && h > softMax) {\n            h = softMax;\n            el.classList.add(\"size-to-content-max\"); // get v-scroll back\n        }\n        if (n.minH && h < n.minH) h = n.minH;\n        else if (n.maxH && h > n.maxH) h = n.maxH;\n        if (h !== n.h) {\n            grid._ignoreLayoutsNodeChange = true;\n            grid.moveNode(n, {\n                h\n            });\n            delete grid._ignoreLayoutsNodeChange;\n        }\n    }\n    /** call the user resize (so they can do extra work) else our build in version */ resizeToContentCheck(el, useAttr = false) {\n        if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el, useAttr);\n        else this.resizeToContent(el, useAttr);\n    }\n    /**\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\n     * @param value margin value\n     */ margin(value) {\n        let isMultiValue = typeof value === \"string\" && value.split(\" \").length > 1;\n        // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\n        if (!isMultiValue) {\n            let data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(value);\n            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\n        }\n        // re-use existing margin handling\n        this.opts.margin = value;\n        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\n        this._initMargin();\n        this._updateStyles(true); // true = force re-create\n        return this;\n    }\n    /** returns current margin number value (undefined if 4 sides don't match) */ getMargin() {\n        return this.opts.margin;\n    }\n    /**\n     * Returns true if the height of the grid will be less than the vertical\n     * constraint. Always returns true if grid doesn't have height constraint.\n     * @param node contains x,y,w,h,auto-position options\n     *\n     * @example\n     * if (grid.willItFit(newWidget)) {\n     *   grid.addWidget(newWidget);\n     * } else {\n     *   alert('Not enough free space to place the widget');\n     * }\n     */ willItFit(node) {\n        // support legacy call for now\n        if (arguments.length > 1) {\n            console.warn(\"gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon\");\n            // eslint-disable-next-line prefer-rest-params\n            let a = arguments, i = 0, w = {\n                x: a[i++],\n                y: a[i++],\n                w: a[i++],\n                h: a[i++],\n                autoPosition: a[i++]\n            };\n            return this.willItFit(w);\n        }\n        return this.engine.willItFit(node);\n    }\n    /** @internal */ _triggerChangeEvent() {\n        if (this.engine.batchMode) return this;\n        let elements = this.engine.getDirtyNodes(true); // verify they really changed\n        if (elements && elements.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(elements);\n            }\n            this._triggerEvent(\"change\", elements);\n        }\n        this.engine.saveInitial(); // we called, now reset initial values & dirty flags\n        return this;\n    }\n    /** @internal */ _triggerAddEvent() {\n        if (this.engine.batchMode) return this;\n        if (this.engine.addedNodes?.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(this.engine.addedNodes);\n            }\n            // prevent added nodes from also triggering 'change' event (which is called next)\n            this.engine.addedNodes.forEach((n)=>{\n                delete n._dirty;\n            });\n            this._triggerEvent(\"added\", this.engine.addedNodes);\n            this.engine.addedNodes = [];\n        }\n        return this;\n    }\n    /** @internal */ _triggerRemoveEvent() {\n        if (this.engine.batchMode) return this;\n        if (this.engine.removedNodes?.length) {\n            this._triggerEvent(\"removed\", this.engine.removedNodes);\n            this.engine.removedNodes = [];\n        }\n        return this;\n    }\n    /** @internal */ _triggerEvent(type, data) {\n        let event = data ? new CustomEvent(type, {\n            bubbles: false,\n            detail: data\n        }) : new Event(type);\n        this.el.dispatchEvent(event);\n        return this;\n    }\n    /** @internal called to delete the current dynamic style sheet used for our layout */ _removeStylesheet() {\n        if (this._styles) {\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.removeStylesheet(this._styleSheetClass);\n            delete this._styles;\n        }\n        return this;\n    }\n    /** @internal updated/create the CSS styles for row based layout and initial margin setting */ _updateStyles(forceUpdate = false, maxH) {\n        // call to delete existing one if we change cellHeight / margin\n        if (forceUpdate) {\n            this._removeStylesheet();\n        }\n        if (!maxH) maxH = this.getRow();\n        this._updateContainerHeight();\n        // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\n        if (this.opts.cellHeight === 0) {\n            return this;\n        }\n        let cellHeight = this.opts.cellHeight;\n        let cellHeightUnit = this.opts.cellHeightUnit;\n        let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\n        // create one as needed\n        if (!this._styles) {\n            // insert style to parent (instead of 'head' by default) to support WebComponent\n            let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;\n            this._styles = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.createStylesheet(this._styleSheetClass, styleLocation, {\n                nonce: this.opts.nonce\n            });\n            if (!this._styles) return this;\n            this._styles._max = 0;\n            // these are done once only\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\n            // content margins\n            let top = this.opts.marginTop + this.opts.marginUnit;\n            let bottom = this.opts.marginBottom + this.opts.marginUnit;\n            let right = this.opts.marginRight + this.opts.marginUnit;\n            let left = this.opts.marginLeft + this.opts.marginUnit;\n            let content = `${prefix} > .grid-stack-item-content`;\n            let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\n            // resize handles offset (to match margin)\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\n        }\n        // now update the height specific fields\n        maxH = maxH || this._styles._max;\n        if (maxH > this._styles._max) {\n            let getHeight = (rows)=>cellHeight * rows + cellHeightUnit;\n            for(let i = this._styles._max + 1; i <= maxH; i++){\n                _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\n                _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i + 1}\"]`, `height: ${getHeight(i + 1)}`); // start at 2\n            }\n            this._styles._max = maxH;\n        }\n        return this;\n    }\n    /** @internal */ _updateContainerHeight() {\n        if (!this.engine || this.engine.batchMode) return this;\n        const parent = this.parentGridItem;\n        let row = this.getRow() + this._extraDragRow; // this checks for minRow already\n        const cellHeight = this.opts.cellHeight;\n        const unit = this.opts.cellHeightUnit;\n        if (!cellHeight) return this;\n        // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\n        if (!parent) {\n            const cssMinHeight = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(getComputedStyle(this.el)[\"minHeight\"]);\n            if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\n                const minRow = Math.floor(cssMinHeight.h / cellHeight);\n                if (row < minRow) {\n                    row = minRow;\n                }\n            }\n        }\n        this.el.setAttribute(\"gs-current-row\", String(row));\n        this.el.style.removeProperty(\"min-height\");\n        this.el.style.removeProperty(\"height\");\n        if (row) {\n            // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\n            this.el.style[parent ? \"minHeight\" : \"height\"] = row * cellHeight + unit;\n        }\n        // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\n        if (parent && !parent.grid.engine.batchMode && _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(parent)) {\n            parent.grid.resizeToContentCheck(parent.el);\n        }\n        return this;\n    }\n    /** @internal */ _prepareElement(el, triggerAddEvent = false, node) {\n        el.classList.add(this.opts.itemClass);\n        node = node || this._readAttr(el);\n        el.gridstackNode = node;\n        node.el = el;\n        node.grid = this;\n        let copy = {\n            ...node\n        };\n        node = this.engine.addNode(node, triggerAddEvent);\n        // write node attr back in case there was collision or we have to fix bad values during addNode()\n        if (!_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.same(node, copy)) {\n            this._writeAttr(el, node);\n        }\n        if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(node)) el.classList.add(\"size-to-content\");\n        this._prepareDragDropByNode(node);\n        return this;\n    }\n    /** @internal call to write position x,y,w,h attributes back to element */ _writePosAttr(el, n) {\n        if (n.x !== undefined && n.x !== null) {\n            el.setAttribute(\"gs-x\", String(n.x));\n        }\n        if (n.y !== undefined && n.y !== null) {\n            el.setAttribute(\"gs-y\", String(n.y));\n        }\n        n.w > 1 ? el.setAttribute(\"gs-w\", String(n.w)) : el.removeAttribute(\"gs-w\");\n        n.h > 1 ? el.setAttribute(\"gs-h\", String(n.h)) : el.removeAttribute(\"gs-h\");\n        return this;\n    }\n    /** @internal call to write any default attributes back to element */ _writeAttr(el, node) {\n        if (!node) return this;\n        this._writePosAttr(el, node);\n        let attrs /*: GridStackWidget but strings */  = {\n            autoPosition: \"gs-auto-position\",\n            noResize: \"gs-no-resize\",\n            noMove: \"gs-no-move\",\n            locked: \"gs-locked\",\n            id: \"gs-id\"\n        };\n        for(const key in attrs){\n            if (node[key]) {\n                el.setAttribute(attrs[key], String(node[key]));\n            } else {\n                el.removeAttribute(attrs[key]);\n            }\n        }\n        return this;\n    }\n    /** @internal call to read any default attributes from element */ _readAttr(el, clearDefaultAttr = true) {\n        let n = {};\n        n.x = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-x\"));\n        n.y = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-y\"));\n        n.w = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-w\"));\n        n.h = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-h\"));\n        n.autoPosition = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-auto-position\"));\n        n.noResize = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-no-resize\"));\n        n.noMove = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-no-move\"));\n        n.locked = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toBool(el.getAttribute(\"gs-locked\"));\n        n.id = el.getAttribute(\"gs-id\");\n        // read but never written out\n        n.maxW = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-max-w\"));\n        n.minW = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-min-w\"));\n        n.maxH = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-max-h\"));\n        n.minH = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.toNumber(el.getAttribute(\"gs-min-h\"));\n        // v8.x optimization to reduce un-needed attr that don't render or are default CSS\n        if (clearDefaultAttr) {\n            if (n.w === 1) el.removeAttribute(\"gs-w\");\n            if (n.h === 1) el.removeAttribute(\"gs-h\");\n            if (n.maxW) el.removeAttribute(\"gs-max-w\");\n            if (n.minW) el.removeAttribute(\"gs-min-w\");\n            if (n.maxH) el.removeAttribute(\"gs-max-h\");\n            if (n.minH) el.removeAttribute(\"gs-min-h\");\n        }\n        // remove any key not found (null or false which is default)\n        for(const key in n){\n            if (!n.hasOwnProperty(key)) return;\n            if (!n[key] && n[key] !== 0) {\n                delete n[key];\n            }\n        }\n        return n;\n    }\n    /** @internal */ _setStaticClass() {\n        let classes = [\n            \"grid-stack-static\"\n        ];\n        if (this.opts.staticGrid) {\n            this.el.classList.add(...classes);\n            this.el.setAttribute(\"gs-static\", \"true\");\n        } else {\n            this.el.classList.remove(...classes);\n            this.el.removeAttribute(\"gs-static\");\n        }\n        return this;\n    }\n    /**\n     * called when we are being resized - check if the one Column Mode needs to be turned on/off\n     * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\n     * or `sizeToContent` gridItem options.\n     */ onResize() {\n        if (!this.el?.clientWidth) return; // return if we're gone or no size yet (will get called again)\n        if (this.prevWidth === this.el.clientWidth) return; // no-op\n        this.prevWidth = this.el.clientWidth;\n        // console.log('onResize ', this.el.clientWidth);\n        this.batchUpdate();\n        // see if we're nested and take our column count from our parent....\n        let columnChanged = false;\n        if (this._autoColumn && this.parentGridItem) {\n            if (this.opts.column !== this.parentGridItem.w) {\n                this.column(this.parentGridItem.w, \"none\");\n                columnChanged = true;\n            }\n        } else {\n            // else check for 1 column in/out behavior\n            let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize || this.opts.column === 1 && !this._prevColumn;\n            if (this.opts.column === 1 !== oneColumn) {\n                // if (this.opts.animate) this.setAnimation(false); // 1 <-> 12 is too radical, turn off animation and we need it for sizeToContent\n                this.column(oneColumn ? 1 : this._prevColumn);\n                // if (this.opts.animate) setTimeout(() => this.setAnimation(true));\n                columnChanged = true;\n            }\n        }\n        // make the cells content square again\n        if (this._isAutoCellHeight) this.cellHeight();\n        // update any nested grids, or items size\n        this.engine.nodes.forEach((n)=>{\n            if (n.subGrid) n.subGrid.onResize();\n        });\n        if (!this._skipInitialResize) this.doContentResize(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\n        delete this._skipInitialResize;\n        this.batchUpdate(false);\n        return this;\n    }\n    doContentResize(delay = true, useAttr = false, n = undefined) {\n        // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\n        // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\n        setTimeout(()=>{\n            if (n) {\n                if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\n            } else if (this.engine.nodes.some((n)=>_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(n))) {\n                const nodes = [\n                    ...this.engine.nodes\n                ]; // in case order changes while resizing one\n                this.batchUpdate();\n                nodes.forEach((n)=>{\n                    if (_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\n                });\n                this.batchUpdate(false);\n            }\n            // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\n            if (this._gsEventHandler[\"resizecontent\"]) this._gsEventHandler[\"resizecontent\"](null, n ? [\n                n\n            ] : this.engine.nodes);\n        }, delay ? 300 + 10 : 0);\n    }\n    /** add or remove the grid element size event handler */ _updateResizeEvent(forceRemove = false) {\n        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\n        // or supporting new sizeToContent option.\n        const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || !this.opts.disableOneColumnMode || this.engine.nodes.find((n)=>n.sizeToContent));\n        if (!forceRemove && trackSize && !this.resizeObserver) {\n            this._sizeThrottle = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.throttle(()=>this.onResize(), this.opts.cellHeightThrottle);\n            this.resizeObserver = new ResizeObserver(()=>this._sizeThrottle());\n            this.resizeObserver.observe(this.el);\n            this._skipInitialResize = true; // makeWidget will originally have called on startup\n        } else if ((forceRemove || !trackSize) && this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            delete this.resizeObserver;\n            delete this._sizeThrottle;\n        }\n        return this;\n    }\n    /** @internal convert a potential selector into actual element */ static getElement(els = \".grid-stack-item\") {\n        return _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getElement(els);\n    }\n    /** @internal */ static getElements(els = \".grid-stack-item\") {\n        return _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getElements(els);\n    }\n    /** @internal */ static getGridElement(els) {\n        return GridStack.getElement(els);\n    }\n    /** @internal */ static getGridElements(els) {\n        return _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getElements(els);\n    }\n    /** @internal initialize margin top/bottom/left/right and units */ _initMargin() {\n        let data;\n        let margin = 0;\n        // support passing multiple values like CSS (ex: '5px 10px 0 20px')\n        let margins = [];\n        if (typeof this.opts.margin === \"string\") {\n            margins = this.opts.margin.split(\" \");\n        }\n        if (margins.length === 2) {\n            this.opts.marginTop = this.opts.marginBottom = margins[0];\n            this.opts.marginLeft = this.opts.marginRight = margins[1];\n        } else if (margins.length === 4) {\n            this.opts.marginTop = margins[0];\n            this.opts.marginRight = margins[1];\n            this.opts.marginBottom = margins[2];\n            this.opts.marginLeft = margins[3];\n        } else {\n            data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(this.opts.margin);\n            this.opts.marginUnit = data.unit;\n            margin = this.opts.margin = data.h;\n        }\n        // see if top/bottom/left/right need to be set as well\n        if (this.opts.marginTop === undefined) {\n            this.opts.marginTop = margin;\n        } else {\n            data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(this.opts.marginTop);\n            this.opts.marginTop = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginBottom === undefined) {\n            this.opts.marginBottom = margin;\n        } else {\n            data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(this.opts.marginBottom);\n            this.opts.marginBottom = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginRight === undefined) {\n            this.opts.marginRight = margin;\n        } else {\n            data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(this.opts.marginRight);\n            this.opts.marginRight = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginLeft === undefined) {\n            this.opts.marginLeft = margin;\n        } else {\n            data = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.parseHeight(this.opts.marginLeft);\n            this.opts.marginLeft = data.h;\n            delete this.opts.margin;\n        }\n        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\n        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\n            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\n        }\n        return this;\n    }\n    /* ===========================================================================================\n     * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\n     * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n     * ===========================================================================================\n     */ /** get the global (but static to this code) DD implementation */ static getDD() {\n        return dd;\n    }\n    /**\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\n     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\n     * is dynamically create and needs to be set later.\n     * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\n     * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\n     * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\n     */ static setupDragIn(dragIn, dragInOptions, root = document) {\n        if (dragInOptions?.pause !== undefined) {\n            _dd_manager__WEBPACK_IMPORTED_MODULE_5__.DDManager.pauseDrag = dragInOptions.pause;\n        }\n        dragInOptions = {\n            ..._types__WEBPACK_IMPORTED_MODULE_2__.dragInDefaultOptions,\n            ...dragInOptions || {}\n        };\n        let els = typeof dragIn === \"string\" ? _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getElements(dragIn, root) : dragIn;\n        if (els.length) els?.forEach((el)=>{\n            if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\n        });\n    }\n    /**\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\n     * @param els widget or selector to modify.\n     * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\n     */ movable(els, val) {\n        if (this.opts.staticGrid) return this; // can't move a static grid!\n        GridStack.getElements(els).forEach((el)=>{\n            let n = el.gridstackNode;\n            if (!n) return;\n            val ? delete n.noMove : n.noMove = true;\n            this._prepareDragDropByNode(n); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\n     * @param els  widget or selector to modify\n     * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\n     */ resizable(els, val) {\n        if (this.opts.staticGrid) return this; // can't resize a static grid!\n        GridStack.getElements(els).forEach((el)=>{\n            let n = el.gridstackNode;\n            if (!n) return;\n            val ? delete n.noResize : n.noResize = true;\n            this._prepareDragDropByNode(n); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Temporarily disables widgets moving/resizing.\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\n     * Note: no-op for static grid\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(false);\n     *  grid.enableResize(false);\n     * @param recurse true (default) if sub-grids also get updated\n     */ disable(recurse = true) {\n        if (this.opts.staticGrid) return;\n        this.enableMove(false, recurse);\n        this.enableResize(false, recurse);\n        this._triggerEvent(\"disable\");\n        return this;\n    }\n    /**\n     * Re-enables widgets moving/resizing - see disable().\n     * Note: no-op for static grid.\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(true);\n     *  grid.enableResize(true);\n     * @param recurse true (default) if sub-grids also get updated\n     */ enable(recurse = true) {\n        if (this.opts.staticGrid) return;\n        this.enableMove(true, recurse);\n        this.enableResize(true, recurse);\n        this._triggerEvent(\"enable\");\n        return this;\n    }\n    /**\n     * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\n     * @param recurse true (default) if sub-grids also get updated\n     */ enableMove(doEnable, recurse = true) {\n        if (this.opts.staticGrid) return this; // can't move a static grid!\n        doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach((n)=>{\n            this._prepareDragDropByNode(n);\n            if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\n        });\n        return this;\n    }\n    /**\n     * Enables/disables widget resizing. No-op for static grids.\n     * @param recurse true (default) if sub-grids also get updated\n     */ enableResize(doEnable, recurse = true) {\n        if (this.opts.staticGrid) return this; // can't size a static grid!\n        doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach((n)=>{\n            this._prepareDragDropByNode(n);\n            if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\n        });\n        return this;\n    }\n    /** @internal removes any drag&drop present (called during destroy) */ _removeDD(el) {\n        dd.draggable(el, \"destroy\").resizable(el, \"destroy\");\n        if (el.gridstackNode) {\n            delete el.gridstackNode._initDD; // reset our DD init flag\n        }\n        delete el.ddElement;\n        return this;\n    }\n    /** @internal called to add drag over to support widgets being added externally */ _setupAcceptWidget() {\n        // check if we need to disable things\n        if (this.opts.staticGrid || !this.opts.acceptWidgets && !this.opts.removable) {\n            dd.droppable(this.el, \"destroy\");\n            return this;\n        }\n        // vars shared across all methods\n        let cellHeight, cellWidth;\n        let onDrag = (event, el, helper)=>{\n            let node = el.gridstackNode;\n            if (!node) return;\n            helper = helper || el;\n            let parent = this.el.getBoundingClientRect();\n            let { top, left } = helper.getBoundingClientRect();\n            left -= parent.left;\n            top -= parent.top;\n            let ui = {\n                position: {\n                    top,\n                    left\n                }\n            };\n            if (node._temporaryRemoved) {\n                node.x = Math.max(0, Math.round(left / cellWidth));\n                node.y = Math.max(0, Math.round(top / cellHeight));\n                delete node.autoPosition;\n                this.engine.nodeBoundFix(node);\n                // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\n                if (!this.engine.willItFit(node)) {\n                    node.autoPosition = true; // ignore x,y and try for any slot...\n                    if (!this.engine.willItFit(node)) {\n                        dd.off(el, \"drag\"); // stop calling us\n                        return; // full grid or can't grow\n                    }\n                    if (node._willFitPos) {\n                        // use the auto position instead #1687\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.copyPos(node, node._willFitPos);\n                        delete node._willFitPos;\n                    }\n                }\n                // re-use the existing node dragging method\n                this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\n            } else {\n                // re-use the existing node dragging that does so much of the collision detection\n                this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\n            }\n        };\n        dd.droppable(this.el, {\n            accept: (el)=>{\n                let node = el.gridstackNode;\n                // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\n                if (node?.grid === this) return true;\n                if (!this.opts.acceptWidgets) return false;\n                // check for accept method or class matching\n                let canAccept = true;\n                if (typeof this.opts.acceptWidgets === \"function\") {\n                    canAccept = this.opts.acceptWidgets(el);\n                } else {\n                    let selector = this.opts.acceptWidgets === true ? \".grid-stack-item\" : this.opts.acceptWidgets;\n                    canAccept = el.matches(selector);\n                }\n                // finally check to make sure we actually have space left #1571\n                if (canAccept && node && this.opts.maxRow) {\n                    let n = {\n                        w: node.w,\n                        h: node.h,\n                        minW: node.minW,\n                        minH: node.minH\n                    }; // only width/height matters and autoPosition\n                    canAccept = this.engine.willItFit(n);\n                }\n                return canAccept;\n            }\n        })/**\n             * entering our grid area\n             */ .on(this.el, \"dropover\", (event, el, helper)=>{\n            // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            let node = el.gridstackNode;\n            // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\n            if (node?.grid === this && !node._temporaryRemoved) {\n                // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\n                return false; // prevent parent from receiving msg (which may be a grid as well)\n            }\n            // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\n            if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\n                // console.log('dropover without leave'); // TEST\n                let otherGrid = node.grid;\n                otherGrid._leave(el, helper);\n            }\n            // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\n            cellWidth = this.cellWidth();\n            cellHeight = this.getCellHeight(true);\n            // load any element attributes if we don't have a node\n            if (!node) {\n                node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\n            }\n            if (!node.grid) {\n                node._isExternal = true;\n                el.gridstackNode = node;\n            }\n            // calculate the grid size based on element outer size\n            helper = helper || el;\n            let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\n            let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\n            // if the item came from another grid, make a copy and save the original info in case we go back there\n            if (node.grid && node.grid !== this) {\n                // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\n                // console.log('dropover cloning node'); // TEST\n                if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\n                el.gridstackNode = node = {\n                    ...node,\n                    w,\n                    h,\n                    grid: this\n                };\n                delete node.x;\n                delete node.y;\n                this.engine.cleanupNode(node).nodeBoundFix(node);\n                // restore some internal fields we need after clearing them all\n                node._initDD = node._isExternal = node._temporaryRemoved = true; // so it can be inserted onDrag below\n            } else {\n                node.w = w;\n                node.h = h;\n                node._temporaryRemoved = true; // so we can insert it\n            }\n            // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\n            this._itemRemoving(node.el, false);\n            dd.on(el, \"drag\", onDrag);\n            // make sure this is called at least once when going fast #1578\n            onDrag(event, el, helper);\n            return false; // prevent parent from receiving msg (which may be a grid as well)\n        })/**\n             * Leaving our grid area...\n             */ .on(this.el, \"dropout\", (event, el, helper)=>{\n            // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            let node = el.gridstackNode;\n            if (!node) return false;\n            // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\n            // so skip this one if we're not the active grid really..\n            if (!node.grid || node.grid === this) {\n                this._leave(el, helper);\n                // if we were created as temporary nested grid, go back to before state\n                if (this._isTemp) {\n                    this.removeAsSubGrid(node);\n                }\n            }\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        })/**\n             * end - releasing the mouse\n             */ .on(this.el, \"drop\", (event, el, helper)=>{\n            let node = el.gridstackNode;\n            // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\n            if (node?.grid === this && !node._isExternal) return false;\n            let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\n            this.placeholder.remove();\n            // notify previous grid of removal\n            // console.log('drop delete _gridstackNodeOrig') // TEST\n            let origNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n            if (wasAdded && origNode?.grid && origNode.grid !== this) {\n                let oGrid = origNode.grid;\n                oGrid.engine.removeNodeFromLayoutCache(origNode);\n                oGrid.engine.removedNodes.push(origNode);\n                oGrid._triggerRemoveEvent()._triggerChangeEvent();\n                // if it's an empty sub-grid that got auto-created, nuke it\n                if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\n                    oGrid.removeAsSubGrid();\n                }\n            }\n            if (!node) return false;\n            // use existing placeholder node as it's already in our list with drop location\n            if (wasAdded) {\n                this.engine.cleanupNode(node); // removes all internal _xyz values\n                node.grid = this;\n            }\n            dd.off(el, \"drag\");\n            // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\n            // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\n            if (helper !== el) {\n                helper.remove();\n                el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\n                if (wasAdded) {\n                    el = el.cloneNode(true);\n                }\n            } else {\n                el.remove(); // reduce flicker as we change depth here, and size further down\n                this._removeDD(el);\n            }\n            if (!wasAdded) return false;\n            el.gridstackNode = node;\n            node.el = el;\n            let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\n            // @ts-ignore\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.removePositioningStyles(el); // @ts-ignore\n            this._writeAttr(el, node);\n            el.classList.add(_types__WEBPACK_IMPORTED_MODULE_2__.gridDefaults.itemClass, this.opts.itemClass);\n            this.el.appendChild(el); // @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\n            if (subGrid) {\n                subGrid.parentGridItem = node;\n                if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\n            }\n            this._updateContainerHeight();\n            this.engine.addedNodes.push(node); // @ts-ignore\n            this._triggerAddEvent(); // @ts-ignore\n            this._triggerChangeEvent();\n            this.engine.endUpdate();\n            if (this._gsEventHandler[\"dropped\"]) {\n                this._gsEventHandler[\"dropped\"]({\n                    ...event,\n                    type: \"dropped\"\n                }, origNode && origNode.grid ? origNode : undefined, node);\n            }\n            // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\n            window.setTimeout(()=>{\n                // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\n                if (node.el && node.el.parentElement) {\n                    this._prepareDragDropByNode(node);\n                } else {\n                    this.engine.removeNode(node);\n                }\n                delete node.grid._isTemp;\n            });\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        });\n        return this;\n    }\n    /** @internal mark item for removal */ _itemRemoving(el, remove) {\n        let node = el ? el.gridstackNode : undefined;\n        if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\n        remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\n        remove ? el.classList.add(\"grid-stack-item-removing\") : el.classList.remove(\"grid-stack-item-removing\");\n    }\n    /** @internal called to setup a trash drop zone if the user specifies it */ _setupRemoveDrop() {\n        if (!this.opts.staticGrid && typeof this.opts.removable === \"string\") {\n            let trashEl = document.querySelector(this.opts.removable);\n            if (!trashEl) return this;\n            // only register ONE drop-over/dropout callback for the 'trash', and it will\n            // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\n            // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\n            if (!dd.isDroppable(trashEl)) {\n                dd.droppable(trashEl, this.opts.removableOptions).on(trashEl, \"dropover\", (event, el)=>this._itemRemoving(el, true)).on(trashEl, \"dropout\", (event, el)=>this._itemRemoving(el, false));\n            }\n        }\n        return this;\n    }\n    /** @internal prepares the element for drag&drop */ _prepareDragDropByNode(node) {\n        let el = node.el;\n        const noMove = node.noMove || this.opts.disableDrag;\n        const noResize = node.noResize || this.opts.disableResize;\n        // check for disabled grid first\n        if (this.opts.staticGrid || noMove && noResize) {\n            if (node._initDD) {\n                this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\n                delete node._initDD;\n            }\n            el.classList.add(\"ui-draggable-disabled\", \"ui-resizable-disabled\"); // add styles one might depend on #1435\n            return this;\n        }\n        if (!node._initDD) {\n            // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\n            let cellWidth;\n            let cellHeight;\n            /** called when item starts moving/resizing */ let onStartMoving = (event, ui)=>{\n                // trigger any 'dragstart' / 'resizestart' manually\n                if (this._gsEventHandler[event.type]) {\n                    this._gsEventHandler[event.type](event, event.target);\n                }\n                cellWidth = this.cellWidth();\n                cellHeight = this.getCellHeight(true); // force pixels for calculations\n                this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when item is being dragged/resized */ let dragOrResize = (event, ui)=>{\n                this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when the item stops moving/resizing */ let onEndMoving = (event)=>{\n                this.placeholder.remove();\n                delete node._moving;\n                delete node._event;\n                delete node._lastTried;\n                // if the item has moved to another grid, we're done here\n                let target = event.target;\n                if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\n                node.el = target;\n                if (node._isAboutToRemove) {\n                    let grid = el.gridstackNode.grid;\n                    if (grid._gsEventHandler[event.type]) {\n                        grid._gsEventHandler[event.type](event, target);\n                    }\n                    grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\n                    grid.removeWidget(el, true, true);\n                } else {\n                    _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.removePositioningStyles(target);\n                    if (node._temporaryRemoved) {\n                        // got removed - restore item back to before dragging position\n                        _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.copyPos(node, node._orig); // @ts-ignore\n                        this._writePosAttr(target, node);\n                        this.engine.addNode(node);\n                    } else {\n                        // move to new placeholder location\n                        this._writePosAttr(target, node);\n                    }\n                    if (this._gsEventHandler[event.type]) {\n                        this._gsEventHandler[event.type](event, target);\n                    }\n                }\n                // @ts-ignore\n                this._extraDragRow = 0; // @ts-ignore\n                this._updateContainerHeight(); // @ts-ignore\n                this._triggerChangeEvent();\n                this.engine.endUpdate();\n                if (event.type === \"resizestop\") {\n                    if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\n                    this.doContentResize(false, true, node); // no amin wait as will use the actual sized coordinate attr\n                }\n            };\n            dd.draggable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                drag: dragOrResize\n            }).resizable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                resize: dragOrResize\n            });\n            node._initDD = true; // we've set DD support now\n        }\n        // finally fine tune move vs resize by disabling any part...\n        dd.draggable(el, noMove ? \"disable\" : \"enable\").resizable(el, noResize ? \"disable\" : \"enable\");\n        return this;\n    }\n    /** @internal handles actual drag/resize start */ _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {\n        this.engine.cleanNodes().beginUpdate(node);\n        // @ts-ignore\n        this._writePosAttr(this.placeholder, node);\n        this.el.appendChild(this.placeholder);\n        // console.log('_onStartMoving placeholder') // TEST\n        node.el = this.placeholder;\n        node._lastUiPosition = ui.position;\n        node._prevYPix = ui.position.top;\n        node._moving = event.type === \"dragstart\"; // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\n        delete node._lastTried;\n        if (event.type === \"dropover\" && node._temporaryRemoved) {\n            // console.log('engine.addNode x=' + node.x); // TEST\n            this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\n            node._moving = true; // AFTER, mark as moving object (wanted fix location before)\n        }\n        // set the min/max resize info\n        this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\n        if (event.type === \"resizestart\") {\n            dd.resizable(el, \"option\", \"minWidth\", cellWidth * (node.minW || 1)).resizable(el, \"option\", \"minHeight\", cellHeight * (node.minH || 1));\n            if (node.maxW) {\n                dd.resizable(el, \"option\", \"maxWidth\", cellWidth * node.maxW);\n            }\n            if (node.maxH) {\n                dd.resizable(el, \"option\", \"maxHeight\", cellHeight * node.maxH);\n            }\n        }\n    }\n    /** @internal handles actual drag/resize */ _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {\n        let p = {\n            ...node._orig\n        }; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\n        let resizing;\n        let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;\n        // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\n        let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);\n        mLeft = Math.min(mLeft, mWidth);\n        mRight = Math.min(mRight, mWidth);\n        mTop = Math.min(mTop, mHeight);\n        mBottom = Math.min(mBottom, mHeight);\n        if (event.type === \"drag\") {\n            if (node._temporaryRemoved) return; // handled by dropover\n            let distance = ui.position.top - node._prevYPix;\n            node._prevYPix = ui.position.top;\n            if (this.opts.draggable.scroll !== false) {\n                _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.updateScrollPosition(el, ui.position, distance);\n            }\n            // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\n            let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\n            let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\n            let prev = this._extraDragRow;\n            if (this.engine.collide(node, p)) {\n                let row = this.getRow();\n                let extra = Math.max(0, p.y + node.h - row);\n                if (this.opts.maxRow && row + extra > this.opts.maxRow) {\n                    extra = Math.max(0, this.opts.maxRow - row);\n                } // @ts-ignore\n                this._extraDragRow = extra; // @ts-ignore\n            } else this._extraDragRow = 0; // @ts-ignore\n            if (this._extraDragRow !== prev) this._updateContainerHeight();\n            if (node.x === p.x && node.y === p.y) return; // skip same\n        // DON'T skip one we tried as we might have failed because of coverage <50% before\n        // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\n        } else if (event.type === \"resize\") {\n            if (p.x < 0) return;\n            // Scrolling page if needed\n            _utils__WEBPACK_IMPORTED_MODULE_1__.Utils.updateScrollResize(event, el, cellHeight);\n            // get new size\n            p.w = Math.round((ui.size.width - mLeft) / cellWidth);\n            p.h = Math.round((ui.size.height - mTop) / cellHeight);\n            if (node.w === p.w && node.h === p.h) return;\n            if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\n            // if we size on left/top side this might move us, so get possible new position as well\n            let left = ui.position.left + mLeft;\n            let top = ui.position.top + mTop;\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            resizing = true;\n        }\n        node._event = event;\n        node._lastTried = p; // set as last tried (will nuke if we go there)\n        let rect = {\n            x: ui.position.left + mLeft,\n            y: ui.position.top + mTop,\n            w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\n            h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\n        };\n        if (this.engine.moveNodeCheck(node, {\n            ...p,\n            cellWidth,\n            cellHeight,\n            rect,\n            resizing\n        })) {\n            node._lastUiPosition = ui.position;\n            this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\n            delete node._skipDown;\n            if (resizing && node.subGrid) node.subGrid.onResize();\n            this._extraDragRow = 0; // @ts-ignore\n            this._updateContainerHeight();\n            let target = event.target; // @ts-ignore\n            this._writePosAttr(target, node);\n            if (this._gsEventHandler[event.type]) {\n                this._gsEventHandler[event.type](event, target);\n            }\n        }\n    }\n    /** @internal called when item leaving our area by either cursor dropout event\n     * or shape is outside our boundaries. remove it from us, and mark temporary if this was\n     * our item to start with else restore prev node values from prev grid it came from.\n     */ _leave(el, helper) {\n        let node = el.gridstackNode;\n        if (!node) return;\n        dd.off(el, \"drag\"); // no need to track while being outside\n        // this gets called when cursor leaves and shape is outside, so only do this once\n        if (node._temporaryRemoved) return;\n        node._temporaryRemoved = true;\n        this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\n        node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\n        if (this.opts.removable === true) {\n            // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\n            this._itemRemoving(el, true);\n        }\n        // finally if item originally came from another grid, but left us, restore things back to prev info\n        if (el._gridstackNodeOrig) {\n            // console.log('leave delete _gridstackNodeOrig') // TEST\n            el.gridstackNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n        } else if (node._isExternal) {\n            // item came from outside (like a toolbar) so nuke any node info\n            delete node.el;\n            delete el.gridstackNode;\n            // and restore all nodes back to original\n            this.engine.restoreInitial();\n        }\n    }\n    // legacy method removed\n    commit() {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_1__.obsolete)(this, this.batchUpdate(false), \"commit\", \"batchUpdate\", \"5.2\");\n        return this;\n    }\n}\n/** parent class for sizing content. defaults to '.grid-stack-item-content' */ GridStack.resizeToContentParent = \".grid-stack-item-content\";\n/** scoping so users can call GridStack.Utils.sort() for example */ GridStack.Utils = _utils__WEBPACK_IMPORTED_MODULE_1__.Utils;\n/** scoping so users can call new GridStack.Engine(12) for example */ GridStack.Engine = _gridstack_engine__WEBPACK_IMPORTED_MODULE_0__.GridStackEngine;\nGridStack.GDRev = \"9.4.0\";\n //# sourceMappingURL=gridstack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/gridstack.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/types.js":
/*!**********************************************!*\
  !*** ./node_modules/gridstack/dist/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dragInDefaultOptions: () => (/* binding */ dragInDefaultOptions),\n/* harmony export */   gridDefaults: () => (/* binding */ gridDefaults)\n/* harmony export */ });\n/**\n * types.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ // default values for grid options - used during init and when saving out\nconst gridDefaults = {\n    alwaysShowResizeHandle: \"mobile\",\n    animate: true,\n    auto: true,\n    cellHeight: \"auto\",\n    cellHeightThrottle: 100,\n    cellHeightUnit: \"px\",\n    column: 12,\n    draggable: {\n        handle: \".grid-stack-item-content\",\n        appendTo: \"body\",\n        scroll: true\n    },\n    handle: \".grid-stack-item-content\",\n    itemClass: \"grid-stack-item\",\n    margin: 10,\n    marginUnit: \"px\",\n    maxRow: 0,\n    minRow: 0,\n    oneColumnSize: 768,\n    placeholderClass: \"grid-stack-placeholder\",\n    placeholderText: \"\",\n    removableOptions: {\n        accept: \"grid-stack-item\",\n        decline: \"grid-stack-non-removable\"\n    },\n    resizable: {\n        handles: \"se\"\n    },\n    rtl: \"auto\"\n};\n/** default dragIn options */ const dragInDefaultOptions = {\n    handle: \".grid-stack-item-content\",\n    appendTo: \"body\"\n}; //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JpZHN0YWNrL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDRCx5RUFBeUU7QUFDbEUsTUFBTUEsZUFBZTtJQUN4QkMsd0JBQXdCO0lBQ3hCQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsWUFBWTtJQUNaQyxvQkFBb0I7SUFDcEJDLGdCQUFnQjtJQUNoQkMsUUFBUTtJQUNSQyxXQUFXO1FBQUVDLFFBQVE7UUFBNEJDLFVBQVU7UUFBUUMsUUFBUTtJQUFLO0lBQ2hGRixRQUFRO0lBQ1JHLFdBQVc7SUFDWEMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxlQUFlO0lBQ2ZDLGtCQUFrQjtJQUNsQkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7UUFBRUMsUUFBUTtRQUFtQkMsU0FBUztJQUEyQjtJQUNuRkMsV0FBVztRQUFFQyxTQUFTO0lBQUs7SUFDM0JDLEtBQUs7QUFZVCxFQUFFO0FBQ0YsMkJBQTJCLEdBQ3BCLE1BQU1DLHVCQUF1QjtJQUNoQ2pCLFFBQVE7SUFDUkMsVUFBVTtBQUdkLEVBQUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sdWNpZGl0eS1kM2pzLy4vbm9kZV9tb2R1bGVzL2dyaWRzdGFjay9kaXN0L3R5cGVzLmpzP2ZjZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB0eXBlcy50cyA5LjQuMFxuICogQ29weXJpZ2h0IChjKSAyMDIxIEFsYWluIER1bWVzbnkgLSBzZWUgR3JpZFN0YWNrIHJvb3QgbGljZW5zZVxuICovXG4vLyBkZWZhdWx0IHZhbHVlcyBmb3IgZ3JpZCBvcHRpb25zIC0gdXNlZCBkdXJpbmcgaW5pdCBhbmQgd2hlbiBzYXZpbmcgb3V0XG5leHBvcnQgY29uc3QgZ3JpZERlZmF1bHRzID0ge1xuICAgIGFsd2F5c1Nob3dSZXNpemVIYW5kbGU6ICdtb2JpbGUnLFxuICAgIGFuaW1hdGU6IHRydWUsXG4gICAgYXV0bzogdHJ1ZSxcbiAgICBjZWxsSGVpZ2h0OiAnYXV0bycsXG4gICAgY2VsbEhlaWdodFRocm90dGxlOiAxMDAsXG4gICAgY2VsbEhlaWdodFVuaXQ6ICdweCcsXG4gICAgY29sdW1uOiAxMixcbiAgICBkcmFnZ2FibGU6IHsgaGFuZGxlOiAnLmdyaWQtc3RhY2staXRlbS1jb250ZW50JywgYXBwZW5kVG86ICdib2R5Jywgc2Nyb2xsOiB0cnVlIH0sXG4gICAgaGFuZGxlOiAnLmdyaWQtc3RhY2staXRlbS1jb250ZW50JyxcbiAgICBpdGVtQ2xhc3M6ICdncmlkLXN0YWNrLWl0ZW0nLFxuICAgIG1hcmdpbjogMTAsXG4gICAgbWFyZ2luVW5pdDogJ3B4JyxcbiAgICBtYXhSb3c6IDAsXG4gICAgbWluUm93OiAwLFxuICAgIG9uZUNvbHVtblNpemU6IDc2OCxcbiAgICBwbGFjZWhvbGRlckNsYXNzOiAnZ3JpZC1zdGFjay1wbGFjZWhvbGRlcicsXG4gICAgcGxhY2Vob2xkZXJUZXh0OiAnJyxcbiAgICByZW1vdmFibGVPcHRpb25zOiB7IGFjY2VwdDogJ2dyaWQtc3RhY2staXRlbScsIGRlY2xpbmU6ICdncmlkLXN0YWNrLW5vbi1yZW1vdmFibGUnIH0sXG4gICAgcmVzaXphYmxlOiB7IGhhbmRsZXM6ICdzZScgfSxcbiAgICBydGw6ICdhdXRvJyxcbiAgICAvLyAqKioqIHNhbWUgYXMgbm90IGJlaW5nIHNldCAqKioqXG4gICAgLy8gZGlzYWJsZURyYWc6IGZhbHNlLFxuICAgIC8vIGRpc2FibGVPbmVDb2x1bW5Nb2RlOiBmYWxzZSxcbiAgICAvLyBkaXNhYmxlUmVzaXplOiBmYWxzZSxcbiAgICAvLyBmbG9hdDogZmFsc2UsXG4gICAgLy8gaGFuZGxlQ2xhc3M6IG51bGwsXG4gICAgLy8gb25lQ29sdW1uTW9kZURvbVNvcnQ6IGZhbHNlLFxuICAgIC8vIHJlbW92YWJsZTogZmFsc2UsXG4gICAgLy8gc3RhdGljR3JpZDogZmFsc2UsXG4gICAgLy8gc3R5bGVJbkhlYWQ6IGZhbHNlLFxuICAgIC8vcmVtb3ZhYmxlXG59O1xuLyoqIGRlZmF1bHQgZHJhZ0luIG9wdGlvbnMgKi9cbmV4cG9ydCBjb25zdCBkcmFnSW5EZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBoYW5kbGU6ICcuZ3JpZC1zdGFjay1pdGVtLWNvbnRlbnQnLFxuICAgIGFwcGVuZFRvOiAnYm9keScsXG4gICAgLy8gcmV2ZXJ0OiAnaW52YWxpZCcsXG4gICAgLy8gc2Nyb2xsOiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOlsiZ3JpZERlZmF1bHRzIiwiYWx3YXlzU2hvd1Jlc2l6ZUhhbmRsZSIsImFuaW1hdGUiLCJhdXRvIiwiY2VsbEhlaWdodCIsImNlbGxIZWlnaHRUaHJvdHRsZSIsImNlbGxIZWlnaHRVbml0IiwiY29sdW1uIiwiZHJhZ2dhYmxlIiwiaGFuZGxlIiwiYXBwZW5kVG8iLCJzY3JvbGwiLCJpdGVtQ2xhc3MiLCJtYXJnaW4iLCJtYXJnaW5Vbml0IiwibWF4Um93IiwibWluUm93Iiwib25lQ29sdW1uU2l6ZSIsInBsYWNlaG9sZGVyQ2xhc3MiLCJwbGFjZWhvbGRlclRleHQiLCJyZW1vdmFibGVPcHRpb25zIiwiYWNjZXB0IiwiZGVjbGluZSIsInJlc2l6YWJsZSIsImhhbmRsZXMiLCJydGwiLCJkcmFnSW5EZWZhdWx0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/types.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/gridstack/dist/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utils: () => (/* binding */ Utils),\n/* harmony export */   obsolete: () => (/* binding */ obsolete),\n/* harmony export */   obsoleteAttr: () => (/* binding */ obsoleteAttr),\n/* harmony export */   obsoleteOpts: () => (/* binding */ obsoleteOpts),\n/* harmony export */   obsoleteOptsDel: () => (/* binding */ obsoleteOptsDel)\n/* harmony export */ });\n/**\n * utils.ts 9.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */ /** checks for obsolete method names */ // eslint-disable-next-line\nfunction obsolete(self, f, oldName, newName, rev) {\n    let wrapper = (...args)=>{\n        console.warn(\"gridstack.js: Function `\" + oldName + \"` is deprecated in \" + rev + \" and has been replaced \" + \"with `\" + newName + \"`. It will be **removed** in a future release\");\n        return f.apply(self, args);\n    };\n    wrapper.prototype = f.prototype;\n    return wrapper;\n}\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */ function obsoleteOpts(opts, oldName, newName, rev) {\n    if (opts[oldName] !== undefined) {\n        opts[newName] = opts[oldName];\n        console.warn(\"gridstack.js: Option `\" + oldName + \"` is deprecated in \" + rev + \" and has been replaced with `\" + newName + \"`. It will be **removed** in a future release\");\n    }\n}\n/** checks for obsolete grid options which are gone */ function obsoleteOptsDel(opts, oldName, rev, info) {\n    if (opts[oldName] !== undefined) {\n        console.warn(\"gridstack.js: Option `\" + oldName + \"` is deprecated in \" + rev + info);\n    }\n}\n/** checks for obsolete Jquery element attributes */ function obsoleteAttr(el, oldName, newName, rev) {\n    let oldAttr = el.getAttribute(oldName);\n    if (oldAttr !== null) {\n        el.setAttribute(newName, oldAttr);\n        console.warn(\"gridstack.js: attribute `\" + oldName + \"`=\" + oldAttr + \" is deprecated on this object in \" + rev + \" and has been replaced with `\" + newName + \"`. It will be **removed** in a future release\");\n    }\n}\n/**\n * Utility methods\n */ class Utils {\n    /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */ static getElements(els, root = document) {\n        if (typeof els === \"string\") {\n            const doc = \"getElementById\" in root ? root : undefined;\n            // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\n            // so if we start with a number, assume it's an id and just return that one item...\n            // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\n            if (doc && !isNaN(+els[0])) {\n                const el = doc.getElementById(els);\n                return el ? [\n                    el\n                ] : [];\n            }\n            let list = root.querySelectorAll(els);\n            if (!list.length && els[0] !== \".\" && els[0] !== \"#\") {\n                list = root.querySelectorAll(\".\" + els);\n                if (!list.length) {\n                    list = root.querySelectorAll(\"#\" + els);\n                }\n            }\n            return Array.from(list);\n        }\n        return [\n            els\n        ];\n    }\n    /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */ static getElement(els, root = document) {\n        if (typeof els === \"string\") {\n            const doc = \"getElementById\" in root ? root : undefined;\n            if (!els.length) return null;\n            if (doc && els[0] === \"#\") {\n                return doc.getElementById(els.substring(1));\n            }\n            if (els[0] === \"#\" || els[0] === \".\" || els[0] === \"[\") {\n                return root.querySelector(els);\n            }\n            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\n            if (doc && !isNaN(+els[0])) {\n                return doc.getElementById(els);\n            }\n            // finally try string, then id, then class\n            let el = root.querySelector(els);\n            if (doc && !el) {\n                el = doc.getElementById(els);\n            }\n            if (!el) {\n                el = root.querySelector(\".\" + els);\n            }\n            return el;\n        }\n        return els;\n    }\n    /** true if we should resize to content */ static shouldSizeToContent(n) {\n        return n?.grid && (!!n.sizeToContent || n.grid.opts.sizeToContent && n.sizeToContent !== false);\n    }\n    /** returns true if a and b overlap */ static isIntercepted(a, b) {\n        return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\n    }\n    /** returns true if a and b touch edges or corners */ static isTouching(a, b) {\n        return Utils.isIntercepted(a, {\n            x: b.x - 0.5,\n            y: b.y - 0.5,\n            w: b.w + 1,\n            h: b.h + 1\n        });\n    }\n    /** returns the area a and b overlap */ static areaIntercept(a, b) {\n        let x0 = a.x > b.x ? a.x : b.x;\n        let x1 = a.x + a.w < b.x + b.w ? a.x + a.w : b.x + b.w;\n        if (x1 <= x0) return 0; // no overlap\n        let y0 = a.y > b.y ? a.y : b.y;\n        let y1 = a.y + a.h < b.y + b.h ? a.y + a.h : b.y + b.h;\n        if (y1 <= y0) return 0; // no overlap\n        return (x1 - x0) * (y1 - y0);\n    }\n    /** returns the area */ static area(a) {\n        return a.w * a.h;\n    }\n    /**\n     * Sorts array of nodes\n     * @param nodes array to sort\n     * @param dir 1 for asc, -1 for desc (optional)\n     * @param width width of the grid. If undefined the width will be calculated automatically (optional).\n     **/ static sort(nodes, dir = 1, column) {\n        column = column || nodes.reduce((col, n)=>Math.max(n.x + n.w, col), 0) || 12;\n        if (dir === -1) return nodes.sort((a, b)=>(b.x ?? 1000) + (b.y ?? 1000) * column - ((a.x ?? 1000) + (a.y ?? 1000) * column));\n        else return nodes.sort((b, a)=>(b.x ?? 1000) + (b.y ?? 1000) * column - ((a.x ?? 1000) + (a.y ?? 1000) * column));\n    }\n    /** find an item by id */ static find(nodes, id) {\n        return id ? nodes.find((n)=>n.id === id) : undefined;\n    }\n    /**\n     * creates a style sheet with style id under given parent\n     * @param id will set the 'gs-style-id' attribute to that id\n     * @param parent to insert the stylesheet as first child,\n     * if none supplied it will be appended to the document head instead.\n     */ static createStylesheet(id, parent, options) {\n        let style = document.createElement(\"style\");\n        const nonce = options?.nonce;\n        if (nonce) style.nonce = nonce;\n        style.setAttribute(\"type\", \"text/css\");\n        style.setAttribute(\"gs-style-id\", id);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (style.styleSheet) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            style.styleSheet.cssText = \"\";\n        } else {\n            style.appendChild(document.createTextNode(\"\")); // WebKit hack\n        }\n        if (!parent) {\n            // default to head\n            parent = document.getElementsByTagName(\"head\")[0];\n            parent.appendChild(style);\n        } else {\n            parent.insertBefore(style, parent.firstChild);\n        }\n        return style.sheet;\n    }\n    /** removed the given stylesheet id */ static removeStylesheet(id) {\n        let el = document.querySelector(\"STYLE[gs-style-id=\" + id + \"]\");\n        if (el && el.parentNode) el.remove();\n    }\n    /** inserts a CSS rule */ static addCSSRule(sheet, selector, rules) {\n        if (typeof sheet.addRule === \"function\") {\n            sheet.addRule(selector, rules);\n        } else if (typeof sheet.insertRule === \"function\") {\n            sheet.insertRule(`${selector}{${rules}}`);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static toBool(v) {\n        if (typeof v === \"boolean\") {\n            return v;\n        }\n        if (typeof v === \"string\") {\n            v = v.toLowerCase();\n            return !(v === \"\" || v === \"no\" || v === \"false\" || v === \"0\");\n        }\n        return Boolean(v);\n    }\n    static toNumber(value) {\n        return value === null || value.length === 0 ? undefined : Number(value);\n    }\n    static parseHeight(val) {\n        let h;\n        let unit = \"px\";\n        if (typeof val === \"string\") {\n            if (val === \"auto\") h = 0;\n            else {\n                let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\n                if (!match) {\n                    throw new Error(\"Invalid height\");\n                }\n                unit = match[2] || \"px\";\n                h = parseFloat(match[1]);\n            }\n        } else {\n            h = val;\n        }\n        return {\n            h,\n            unit\n        };\n    }\n    /** copies unset fields in target to use the given default sources values */ // eslint-disable-next-line\n    static defaults(target, ...sources) {\n        sources.forEach((source)=>{\n            for(const key in source){\n                if (!source.hasOwnProperty(key)) return;\n                if (target[key] === null || target[key] === undefined) {\n                    target[key] = source[key];\n                } else if (typeof source[key] === \"object\" && typeof target[key] === \"object\") {\n                    // property is an object, recursively add it's field over... #1373\n                    this.defaults(target[key], source[key]);\n                }\n            }\n        });\n        return target;\n    }\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */ static same(a, b) {\n        if (typeof a !== \"object\") return a == b;\n        if (typeof a !== typeof b) return false;\n        // else we have object, check just 1 level deep for being same things...\n        if (Object.keys(a).length !== Object.keys(b).length) return false;\n        for(const key in a){\n            if (a[key] !== b[key]) return false;\n        }\n        return true;\n    }\n    /** copies over b size & position (GridStackPosition), and optionally min/max as well */ static copyPos(a, b, doMinMax = false) {\n        if (b.x !== undefined) a.x = b.x;\n        if (b.y !== undefined) a.y = b.y;\n        if (b.w !== undefined) a.w = b.w;\n        if (b.h !== undefined) a.h = b.h;\n        if (doMinMax) {\n            if (b.minW) a.minW = b.minW;\n            if (b.minH) a.minH = b.minH;\n            if (b.maxW) a.maxW = b.maxW;\n            if (b.maxH) a.maxH = b.maxH;\n        }\n        return a;\n    }\n    /** true if a and b has same size & position */ static samePos(a, b) {\n        return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\n    }\n    /** given a node, makes sure it's min/max are valid */ static sanitizeMinMax(node) {\n        // remove 0, undefine, null\n        if (!node.minW) {\n            delete node.minW;\n        }\n        if (!node.minH) {\n            delete node.minH;\n        }\n        if (!node.maxW) {\n            delete node.maxW;\n        }\n        if (!node.maxH) {\n            delete node.maxH;\n        }\n    }\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */ static removeInternalAndSame(a, b) {\n        if (typeof a !== \"object\" || typeof b !== \"object\") return;\n        for(let key in a){\n            let val = a[key];\n            if (key[0] === \"_\" || val === b[key]) {\n                delete a[key];\n            } else if (val && typeof val === \"object\" && b[key] !== undefined) {\n                for(let i in val){\n                    if (val[i] === b[key][i] || i[0] === \"_\") {\n                        delete val[i];\n                    }\n                }\n                if (!Object.keys(val).length) {\n                    delete a[key];\n                }\n            }\n        }\n    }\n    /** removes internal fields '_' and default values for saving */ static removeInternalForSave(n, removeEl = true) {\n        for(let key in n){\n            if (key[0] === \"_\" || n[key] === null || n[key] === undefined) delete n[key];\n        }\n        delete n.grid;\n        if (removeEl) delete n.el;\n        // delete default values (will be re-created on read)\n        if (!n.autoPosition) delete n.autoPosition;\n        if (!n.noResize) delete n.noResize;\n        if (!n.noMove) delete n.noMove;\n        if (!n.locked) delete n.locked;\n        if (n.w === 1 || n.w === n.minW) delete n.w;\n        if (n.h === 1 || n.h === n.minH) delete n.h;\n    }\n    /** return the closest parent (or itself) matching the given class */ // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\n    //   while (el) {\n    //     if (el.classList.contains(name)) return el;\n    //     el = el.parentElement\n    //   }\n    //   return null;\n    // }\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */ static throttle(func, delay) {\n        let isWaiting = false;\n        return (...args)=>{\n            if (!isWaiting) {\n                isWaiting = true;\n                setTimeout(()=>{\n                    func(...args);\n                    isWaiting = false;\n                }, delay);\n            }\n        };\n    }\n    static removePositioningStyles(el) {\n        let style = el.style;\n        if (style.position) {\n            style.removeProperty(\"position\");\n        }\n        if (style.left) {\n            style.removeProperty(\"left\");\n        }\n        if (style.top) {\n            style.removeProperty(\"top\");\n        }\n        if (style.width) {\n            style.removeProperty(\"width\");\n        }\n        if (style.height) {\n            style.removeProperty(\"height\");\n        }\n    }\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */ static getScrollElement(el) {\n        if (!el) return document.scrollingElement || document.documentElement; // IE support\n        const style = getComputedStyle(el);\n        const overflowRegex = /(auto|scroll)/;\n        if (overflowRegex.test(style.overflow + style.overflowY)) {\n            return el;\n        } else {\n            return this.getScrollElement(el.parentElement);\n        }\n    }\n    /** @internal */ static updateScrollPosition(el, position, distance) {\n        // is widget in view?\n        let rect = el.getBoundingClientRect();\n        let innerHeightOrClientHeight = window.innerHeight || document.documentElement.clientHeight;\n        if (rect.top < 0 || rect.bottom > innerHeightOrClientHeight) {\n            // set scrollTop of first parent that scrolls\n            // if parent is larger than el, set as low as possible\n            // to get entire widget on screen\n            let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\n            let offsetDiffUp = rect.top;\n            let scrollEl = this.getScrollElement(el);\n            if (scrollEl !== null) {\n                let prevScroll = scrollEl.scrollTop;\n                if (rect.top < 0 && distance < 0) {\n                    // moving up\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    } else {\n                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\n                    }\n                } else if (distance > 0) {\n                    // moving down\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    } else {\n                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\n                    }\n                }\n                // move widget y by amount scrolled\n                position.top += scrollEl.scrollTop - prevScroll;\n            }\n        }\n    }\n    /**\n     * @internal Function used to scroll the page.\n     *\n     * @param event `MouseEvent` that triggers the resize\n     * @param el `HTMLElement` that's being resized\n     * @param distance Distance from the V edges to start scrolling\n     */ static updateScrollResize(event, el, distance) {\n        const scrollEl = this.getScrollElement(el);\n        const height = scrollEl.clientHeight;\n        // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\n        // #1745 Special situation if scrollEl is document 'html': here browser spec states that\n        // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\n        // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\n        const offsetTop = scrollEl === this.getScrollElement() ? 0 : scrollEl.getBoundingClientRect().top;\n        const pointerPosY = event.clientY - offsetTop;\n        const top = pointerPosY < distance;\n        const bottom = pointerPosY > height - distance;\n        if (top) {\n            // This also can be done with a timeout to keep scrolling while the mouse is\n            // in the scrolling zone. (will have smoother behavior)\n            scrollEl.scrollBy({\n                behavior: \"smooth\",\n                top: pointerPosY - distance\n            });\n        } else if (bottom) {\n            scrollEl.scrollBy({\n                behavior: \"smooth\",\n                top: distance - (height - pointerPosY)\n            });\n        }\n    }\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */ static clone(obj) {\n        if (obj === null || obj === undefined || typeof obj !== \"object\") {\n            return obj;\n        }\n        // return Object.assign({}, obj);\n        if (obj instanceof Array) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return [\n                ...obj\n            ];\n        }\n        return {\n            ...obj\n        };\n    }\n    /**\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\n     */ static cloneDeep(obj) {\n        // list of fields we will skip during cloneDeep (nested objects, other internal)\n        const skipFields = [\n            \"parentGrid\",\n            \"el\",\n            \"grid\",\n            \"subGrid\",\n            \"engine\"\n        ];\n        // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\n        const ret = Utils.clone(obj);\n        for(const key in ret){\n            // NOTE: we don't support function/circular dependencies so skip those properties for now...\n            if (ret.hasOwnProperty(key) && typeof ret[key] === \"object\" && key.substring(0, 2) !== \"__\" && !skipFields.find((k)=>k === key)) {\n                ret[key] = Utils.cloneDeep(obj[key]);\n            }\n        }\n        return ret;\n    }\n    /** deep clone the given HTML node, removing teh unique id field */ static cloneNode(el) {\n        const node = el.cloneNode(true);\n        node.removeAttribute(\"id\");\n        return node;\n    }\n    static appendTo(el, parent) {\n        let parentNode;\n        if (typeof parent === \"string\") {\n            parentNode = Utils.getElement(parent);\n        } else {\n            parentNode = parent;\n        }\n        if (parentNode) {\n            parentNode.appendChild(el);\n        }\n    }\n    // public static setPositionRelative(el: HTMLElement): void {\n    //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\n    //     el.style.position = \"relative\";\n    //   }\n    // }\n    static addElStyles(el, styles) {\n        if (styles instanceof Object) {\n            for(const s in styles){\n                if (styles.hasOwnProperty(s)) {\n                    if (Array.isArray(styles[s])) {\n                        // support fallback value\n                        styles[s].forEach((val)=>{\n                            el.style[s] = val;\n                        });\n                    } else {\n                        el.style[s] = styles[s];\n                    }\n                }\n            }\n        }\n    }\n    static initEvent(e, info) {\n        const evt = {\n            type: info.type\n        };\n        const obj = {\n            button: 0,\n            which: 0,\n            buttons: 1,\n            bubbles: true,\n            cancelable: true,\n            target: info.target ? info.target : e.target\n        };\n        // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n        if (e.dataTransfer) {\n            evt[\"dataTransfer\"] = e.dataTransfer; // workaround 'readonly' field.\n        }\n        [\n            \"altKey\",\n            \"ctrlKey\",\n            \"metaKey\",\n            \"shiftKey\"\n        ].forEach((p)=>evt[p] = e[p]); // keys\n        [\n            \"pageX\",\n            \"pageY\",\n            \"clientX\",\n            \"clientY\",\n            \"screenX\",\n            \"screenY\"\n        ].forEach((p)=>evt[p] = e[p]); // point info\n        return {\n            ...evt,\n            ...obj\n        };\n    }\n    /** copies the MouseEvent properties and sends it as another event to the given target */ static simulateMouseEvent(e, simulatedType, target) {\n        const simulatedEvent = document.createEvent(\"MouseEvents\");\n        simulatedEvent.initMouseEvent(simulatedType, true, true, window, 1, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, e.target // relatedTarget\n        );\n        (target || e.target).dispatchEvent(simulatedEvent);\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gridstack/dist/utils.js\n");

/***/ }),

/***/ "./node_modules/gridstack/dist/gridstack.css":
/*!***************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.css ***!
  \***************************************************/
/***/ (() => {



/***/ })

};
;